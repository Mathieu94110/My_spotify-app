{"version":3,"sources":["store/authentication/authenticationSlice.js","store/user/userSlice.js","pages/authentication/authentication.jsx","utils/hashUtils.js","oauthConfig.js","pages/home/home.jsx","pages/playlists/createPlaylist.jsx","pages/playlists/playlists.jsx","components/search/searchResultItem/searchResultItem.jsx","components/search/searchResult/searchResult.jsx","pages/search/search.jsx","assets/images/spotify-logo.png","components/SideBar/SideBar.jsx","App.js","store/store.js","serviceWorker.js","index.js"],"names":["authenticationSlice","createSlice","name","initialState","loggedIn","accessToken","tokenExpiryDate","reducers","setLoggedIn","state","action","payload","setAccessToken","setTokenExpiryDate","date","Date","setSeconds","getSeconds","toISOString","actions","setUserId","selectIsLoggedIn","authorization","userSlice","displayName","userId","product","setDisplayName","setProduct","selectDisplayName","user","hashParams","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","access_token","expires_in","history","pushState","document","title","pathname","search","Authentication","isLoggedIn","useSelector","dispatch","useDispatch","useEffect","localStorage","setItem","Number","myHeaders","Headers","append","fetch","method","headers","then","response","json","data","display_name","id","catch","error","console","log","status","className","onClick","open","process","join","replace","to","Home","userName","charAt","toUpperCase","slice","createPlaylist","props","searchImage","config","Authorization","params","q","description","type","limit","axios","get","res","setState","albums","items","images","url","alert","JSON","stringify","create","post","KEY","height","width","e","handleChange","target","value","style","display","flexDirection","justifyContent","margin","TextField","label","this","onChange","Button","variant","color","map","album","index","ListItem","ListItemAvatar","Avatar","alt","src","ListItemText","primary","Component","Playlists","useState","playlists","setPlaylists","playlistsLoading","setPlaylistsLoading","loadData","result","getUserPlaylists","getItem","token","ImageList","rowHeight","ImageListItem","cols","ListSubheader","component","playlist","ImageListItemBar","actionIcon","IconButton","SearchResultItem","track","albumUrl","artist","SearchResult","searchResults","uri","Search","setSearch","setSearchResults","tracks","smallestAlbumImage","smallest","image","artists","placeholder","Sidebar","setopen","spotifyLogo","icon","faHome","faMagnifyingGlass","faFolder","App","exact","path","element","store","configureStore","reducer","authenticationReducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.672cd34c.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  loggedIn: false,\r\n  accessToken: \"\",\r\n  tokenExpiryDate: \"\",\r\n};\r\nexport const authenticationSlice = createSlice({\r\n  name: \"authorization\",\r\n  initialState,\r\n  reducers: {\r\n    setLoggedIn: (state, action) => {\r\n      state.loggedIn = action.payload;\r\n    },\r\n    setAccessToken: (state, action) => {\r\n      state.accessToken = action.payload;\r\n    },\r\n    setTokenExpiryDate: (state, action) => {\r\n      const date = new Date();\r\n      date.setSeconds(date.getSeconds() + action.payload);\r\n      state.tokenExpiryDate = date.toISOString();\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setLoggedIn, setAccessToken, setUserId, setTokenExpiryDate } =\r\n  authenticationSlice.actions;\r\n\r\nexport const selectIsLoggedIn = (state) => state.authorization.loggedIn;\r\nexport const selectAccessToken = (state) => state.authorization.accessToken;\r\nexport const selectTokenExpiryDate = (state) =>\r\n  state.authorization.tokenExpiryDate;\r\n\r\nexport default authenticationSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { setLoggedIn } from \"../authentication/authenticationSlice\";\r\n\r\nconst initialState = {\r\n  displayName: \"\",\r\n  userId: \"\",\r\n  product: \"\",\r\n};\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState,\r\n  reducers: {\r\n    setDisplayName: (state, action) => {\r\n      state.displayName = action.payload;\r\n    },\r\n    setUserId: (state, action) => {\r\n      state.userId = action.payload;\r\n    },\r\n    setProduct: (state, action) => {\r\n      state.product = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setDisplayName, setUserId, setProduct } = userSlice.actions;\r\n\r\nexport const selectDisplayName = (state) => state.user.displayName;\r\nexport const selectProduct = (state) => state.user.product;\r\nexport const userId = (state) => state.user.userId;\r\nexport const setUserProfileAsync = (accessToken) => (dispatch) => {\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Authorization\", \"Bearer \" + accessToken);\r\n\r\n  fetch(\"https://api.spotify.com/v1/me\", {\r\n    method: \"GET\",\r\n    headers: myHeaders,\r\n  })\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      dispatch(setDisplayName(data.display_name ? data.display_name : \"\"));\r\n      dispatch(setUserId(data.id));\r\n      // we inject also userId in localStorage in order to reuse it easily\r\n      localStorage.setItem(\"userId\", data.id);\r\n      dispatch(setProduct(data.product));\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n      if (error) {\r\n        if (error.status === 401) {\r\n          dispatch(setLoggedIn(false));\r\n        }\r\n      }\r\n    });\r\n};\r\n\r\nexport default userSlice.reducer;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  setLoggedIn,\r\n  setAccessToken,\r\n  setTokenExpiryDate,\r\n  selectIsLoggedIn,\r\n} from \"../../store/authentication/authenticationSlice\";\r\nimport { setUserProfileAsync } from \"../../store/user/userSlice\";\r\nimport { getAuthorizeHref } from \"../../oauthConfig\";\r\nimport { getHashParams, removeHashParamsFromUrl } from \"../../utils/hashUtils\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport \"./authentication.css\";\r\n\r\n// Here we register url values when getAuthorizeHref get the data from spotify api\r\nconst hashParams = getHashParams();\r\nconst access_token = hashParams.access_token;\r\nconst expires_in = hashParams.expires_in;\r\n// We clean hash\r\nremoveHashParamsFromUrl();\r\n\r\nconst Authentication = () => {\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (access_token) {\r\n      // We sending access Token to localStorage and other values to reducers\r\n      localStorage.setItem(\"accessToken\", access_token);\r\n      dispatch(setLoggedIn(true));\r\n      dispatch(setAccessToken(access_token));\r\n      dispatch(setTokenExpiryDate(Number(expires_in)));\r\n      dispatch(setUserProfileAsync(access_token));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"login-page\">\r\n      {!isLoggedIn && (\r\n        <button\r\n          className=\"login-button\"\r\n          aria-label=\"Log in using OAuth 2.0\"\r\n          onClick={() => window.open(getAuthorizeHref(), \"_self\")}\r\n        >\r\n          Se connecter\r\n        </button>\r\n      )}\r\n      {\r\n        //When logged we navigate to home\r\n        isLoggedIn && <Navigate replace to=\"/home\" />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Authentication;\r\n","export const getHashParams = () => {\r\n  return window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(function (initial, item) {\r\n      if (item) {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n      }\r\n      return initial;\r\n    }, {});\r\n};\r\n\r\nexport const removeHashParamsFromUrl = () => {\r\n  window.history.pushState(\r\n    \"\",\r\n    document.title,\r\n    window.location.pathname + window.location.search\r\n  );\r\n};\r\n","const authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\nexport const getAuthorizeHref = () => {\r\n  const scopes = [\r\n    \"user-read-private\",\r\n    \"playlist-modify-public\",\r\n    \"playlist-modify-private\",\r\n  ];\r\n  const clientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\r\n  const redirectUri = process.env.REACT_APP_REDIRECT_URI;\r\n  return `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\r\n    \"%20\"\r\n  )}&response_type=token`;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { selectDisplayName } from \"../../store/user/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./home.css\";\r\n\r\nconst Home = () => {\r\n  const userName = useSelector(selectDisplayName);\r\n  return (\r\n    <div className=\"home-container\">\r\n      <h1 className=\"home-title\">\r\n        Bienvenue {userName.charAt(0).toUpperCase() + userName.slice(1)}, vous\r\n        êtes bien connecté sur votre plateforme Spotify\r\n      </h1>\r\n      <div className=\"in-stagging-container\">\r\n        <p>\r\n          Page Home actuellement en rénovation, ajout des tendances globales et\r\n          par catégories de genre, bientôt disponible\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nexport default class createPlaylist extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      description: \"\",\r\n      albums: [],\r\n    };\r\n  }\r\n\r\n  searchImage = () => {\r\n    let accessToken = localStorage.accessToken;\r\n    let config = {\r\n      headers: { Authorization: `Bearer ${accessToken}` },\r\n      params: {\r\n        q: this.state.description,\r\n        type: \"album\",\r\n        limit: 3,\r\n      },\r\n    };\r\n    axios.get(\"https://api.spotify.com/v1/search\", config).then((res) => {\r\n      console.log(\"create Playlists =\", res.data);\r\n      this.setState({\r\n        albums: res.data.albums.items[0].images[0].url,\r\n      });\r\n      alert(JSON.stringify(this.state.albums));\r\n    });\r\n  };\r\n\r\n  create = () => {\r\n    let accessToken = localStorage.accessToken;\r\n    let userId = localStorage.userId;\r\n    if (accessToken && userId) {\r\n      const config = {\r\n        headers: { Authorization: `Bearer ${accessToken}` },\r\n      };\r\n      axios\r\n        .post(\r\n          \"https://api.spotify.com/v1/users/\" + userId + \"/playlists\",\r\n          {\r\n            name: this.state.name,\r\n\r\n            description: this.state.description,\r\n            images: [\r\n              {\r\n                KEY: \"image_description\",\r\n                height: 640,\r\n                url: `${JSON.stringify(this.state.albums)}`,\r\n                width: 640,\r\n              },\r\n            ],\r\n          },\r\n          config\r\n        )\r\n        .then((res) => {\r\n          console.log(res);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    }\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n      [e.target.description]: e.target.value,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            margin: \"100px auto\",\r\n          }}\r\n        >\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Nom de la playlist\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            style={{}}\r\n          />\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            name=\"description\"\r\n            label=\"Image(Nom d'un album)\"\r\n            value={this.state.description}\r\n            onChange={this.handleChange}\r\n            style={{}}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={this.searchImage}\r\n          >\r\n            Valider l'album\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={this.create}>\r\n            Créer la playlist\r\n          </Button>\r\n        </div>\r\n        <div style={{ height: \"480px\" }}>\r\n          <h2 style={{color:\"red\"}}>En cours de rénovation</h2>\r\n          {this.state.albums.map((album, index) => {\r\n            return (\r\n              <div>\r\n                <ul>\r\n                  <ListItem key={index}>\r\n                    <ListItemAvatar>\r\n                      <Avatar alt=\"album image\" src={album.images[2].url} />\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={album.name} />\r\n                  </ListItem>\r\n                </ul>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\nstate et api call /\r\n\r\n\r\nconst app = {};\r\n\r\napp.getArists = (artist) => $.ajax({\r\n    url: 'https://api.spotify.com/v1/search',\r\n    method: 'GET',\r\n    dataType: 'json',\r\n    data: {\r\n        type: 'artist',\r\n        q: artist\r\n    }\r\n});\r\n\r\napp.getAristsAlbums = (id) => $.ajax({\r\n    url: `https://api.spotify.com/v1/artists/${id}/albums`,\r\n    method: 'GET',\r\n    dataType: 'json',\r\n    data: {\r\n        album_type: 'album',\r\n    }\r\n});\r\n\r\napp.getAlbumTracks = (id) => $.ajax({\r\n    url: `https://api.spotify.com/v1/albums/${id}/tracks`,\r\n    method: 'GET',\r\n    dataType: 'json'\r\n});\r\n\r\napp.getAlbums = function(artists) {\r\n    let albums = artists.map(artist => app.getAristsAlbums(artist.id));\r\n    $.when(...albums)\r\n        .then((...albums) => {\r\n            let albumIds = albums\r\n                .map(a => a[0].items)\r\n                .reduce((prev,curr) => [...prev,...curr] ,[])\r\n                .map(album => app.getAlbumTracks(album.id));\r\n\r\n            app.getTracks(albumIds);\r\n        });\r\n};\r\n\r\napp.getTracks = function(tracks) {\r\n    $.when(...tracks)\r\n        .then((...tracks) => {\r\n            tracks = tracks\r\n                .map(getDataObject)\r\n                .reduce((prev,curr) => [...prev,...curr],[]);   \r\n            const randomPlayList = getRandomTracks(50,tracks);\r\n            app.createPlayList(randomPlayList);\r\n        })\r\n};\r\n\r\napp.createPlayList = function(songs) {\r\n    const baseUrl = 'https://embed.spotify.com/?theme=white&uri=spotify:trackset:My Playlist:';\r\n    songs = songs.map(song => song.id).join(',');\r\n    $('.loader').removeClass('show');\r\n    $('.playlist').append(`<iframe src=\"${baseUrl + songs}\" height=\"400\"></iframe>`);\r\n}\r\n\r\napp.init = function() {\r\n    $('form').on('submit', function(e) {\r\n        e.preventDefault();\r\n        let artists = $('input[type=search]').val();\r\n        $('.loader').addClass('show');\r\n        artists = artists\r\n            .split(',')\r\n            .map(app.getArists);\r\n        \r\n        $.when(...artists)\r\n            .then((...artists) => {\r\n                artists = artists.map(a => a[0].artists.items[0]);\r\n                console.log(artists);\r\n                app.getAlbums(artists);\r\n            });\r\n    });\r\n\r\n}\r\n\r\nconst getDataObject = arr => arr[0].items;\r\n\r\nfunction getRandomTracks(num, tracks) {\r\n    const randomResults = [];\r\n    for(let i = 0; i < num; i++) {\r\n        randomResults.push(tracks[ Math.floor(Math.random() * tracks.length) ])\r\n    }\r\n    return randomResults;\r\n}\r\n\r\n$(app.init);\r\n\r\n*/\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CreatePlaylist from \"./createPlaylist\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { ImageList } from \"@material-ui/core\";\r\nimport { ImageListItem } from \"@material-ui/core\";\r\nimport { ImageListItemBar } from \"@material-ui/core\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport { selectDisplayName } from \"../../store/user/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./playlists.css\";\r\n\r\nconst Playlists = () => {\r\n  const [playlists, setPlaylists] = useState({});\r\n  const [playlistsLoading, setPlaylistsLoading] = useState(false);\r\n\r\n  const userName = useSelector(selectDisplayName);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      setPlaylistsLoading(true);\r\n      const result = getUserPlaylists();\r\n      setPlaylists(result);\r\n      setPlaylistsLoading(false);\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  const getUserPlaylists = () => {\r\n    const user = localStorage.getItem(\"userId\");\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    const config = {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    };\r\n    axios\r\n      .get(\"https://api.spotify.com/v1/users/\" + user + \"/playlists\", config)\r\n      .then((response) => {\r\n        setPlaylists(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"playlists-container\">\r\n      {playlistsLoading && <div>Loading...</div>}\r\n\r\n      {playlists && (\r\n        <div className=\"playlists-content\">\r\n          <div className=\"user-playlists\">\r\n            <ImageList rowHeight={180} className=\"image-list\">\r\n              <ImageListItem\r\n                key=\"Subheader\"\r\n                cols={2}\r\n                className=\"image-list-subheader-item\"\r\n              >\r\n                <ListSubheader component=\"div\">\r\n                  <h2>Playlists actuelles</h2>\r\n                </ListSubheader>\r\n              </ImageListItem>\r\n              {playlists?.items\r\n                ? playlists.items.map((playlist, index) => (\r\n                    <ImageListItem key={index}>\r\n                      {playlist.images[0] && (\r\n                        <img\r\n                          src={playlist.images[0].url}\r\n                          alt={playlist.title}\r\n                        />\r\n                      )}\r\n                      <ImageListItemBar\r\n                        title={playlist.name}\r\n                        actionIcon={\r\n                          <IconButton\r\n                            aria-label={`Voir titres`}\r\n                            className=\"icon-button-color\"\r\n                          >\r\n                            <InfoIcon\r\n                              onClick={() =>\r\n                                (window.location =\r\n                                  \"/playlists?id=\" +\r\n                                  playlist.id +\r\n                                  \"&artist=\" +\r\n                                  playlist.name)\r\n                              }\r\n                            />\r\n                          </IconButton>\r\n                        }\r\n                      />\r\n                    </ImageListItem>\r\n                  ))\r\n                : null}\r\n            </ImageList>\r\n          </div>\r\n          <div className=\"create-playlist-container\">\r\n            <CreatePlaylist />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playlists;\r\n","import React from \"react\";\r\nimport \"./searchResultItem.css\";\r\nconst SearchResultItem = ({ track }) => {\r\n  return (\r\n    <div className=\"search-container\">\r\n      <span className=\"image\">\r\n        <img src={track.albumUrl} />{\" \"}\r\n      </span>\r\n      <div className=\"song\">\r\n        <span className=\"text\">{track.title}</span>\r\n        <span className=\"artist\">{track.artist}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResultItem;\r\n","import React from \"react\";\r\nimport \"./searchResult.css\";\r\nimport SearchResultItem from \"../searchResultItem/searchResultItem\";\r\n\r\nconst SearchResult = ({ searchResults }) => {\r\n  return (\r\n    <div className=\"search-result\">\r\n      {searchResults.map((track) => (\r\n        <SearchResultItem track={track} key={track.uri} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport SearchResult from \"../../components/search/searchResult/searchResult\";\r\nimport \"./search.css\";\r\n\r\nconst Search = () => {\r\n  const accessToken = localStorage.getItem(\"accessToken\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!search) return setSearchResults([]);\r\n\r\n    let config = {\r\n      headers: { Authorization: `Bearer ${accessToken}` },\r\n      params: {\r\n        q: search,\r\n        type: \"track\",\r\n      },\r\n    };\r\n    axios.get(\"https://api.spotify.com/v1/search\", config).then((res) => {\r\n      setSearchResults(\r\n        res.data.tracks.items.map((track) => {\r\n          const smallestAlbumImage = track.album.images.reduce(\r\n            (smallest, image) => {\r\n              if (image.height < smallest.height) return image;\r\n              return smallest;\r\n            },\r\n            track.album.images[0]\r\n          );\r\n          return {\r\n            artist: track.artists[0].name,\r\n            title: track.name,\r\n            uri: track.uri,\r\n            albumUrl: smallestAlbumImage.url,\r\n          };\r\n        })\r\n      );\r\n    });\r\n  }, [search]);\r\n\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100%\" }}>\r\n      <input\r\n        className=\"search-input\"\r\n        type=\"search\"\r\n        placeholder=\"Rechercher un titre\"\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n      ;\r\n      <SearchResult searchResults={searchResults} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","export default __webpack_public_path__ + \"static/media/spotify-logo.056948ef.png\";","import { useState } from \"react\";\r\nimport \"./SideBar.css\";\r\nimport spotifyLogo from \"../../assets/images/spotify-logo.png\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faHome,\r\n  faMagnifyingGlass,\r\n  faFolder,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\n\r\nexport default function Sidebar() {\r\n  const [open, setopen] = useState(true);\r\n  const toggleOpen = () => {\r\n    setopen(!open);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={open ? \"sidebar\" : \"sidebar sidebar-closed\"}>\r\n        <div className=\"top-links\">\r\n          <div className=\"logo\">\r\n            <img\r\n              src={spotifyLogo}\r\n              alt=\"spotify\"\r\n              className={open ? \"logo-img\" : \"logo-img-closed\"}\r\n            />\r\n          </div>\r\n          <button\r\n            className={open ? \"menu-toggle\" : \"menu-toggle menu-toggle-closed\"}\r\n            onClick={toggleOpen}\r\n          >\r\n            {open ? (\r\n              <KeyboardDoubleArrowLeftIcon />\r\n            ) : (\r\n              <KeyboardDoubleArrowRightIcon />\r\n            )}\r\n          </button>\r\n          <ul>\r\n            <li>\r\n              <NavLink to=\"/home\" className=\"nav-link\">\r\n                <span>\r\n                  <FontAwesomeIcon icon={faHome} />\r\n                </span>\r\n                <span className={open ? \"margin-left\" : \"display-none\"}>\r\n                  Accueil\r\n                </span>\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/search\" className=\"nav-link\">\r\n                <span>\r\n                  <FontAwesomeIcon icon={faMagnifyingGlass} />\r\n                </span>\r\n                <span className={open ? \"margin-left\" : \"display-none\"}>\r\n                  Rechercher\r\n                </span>\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/playlists\" className=\"nav-link\">\r\n                <span>\r\n                  <FontAwesomeIcon icon={faFolder} />\r\n                </span>\r\n                <span className={open ? \"margin-left\" : \"display-none\"}>\r\n                  {\" \"}\r\n                  Vos playlists\r\n                </span>\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Authentication from \"./pages/authentication/authentication\";\r\nimport Home from \"./pages/home/home\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport Playlists from \"./pages/playlists/playlists\";\r\nimport Search from \"./pages/search/search\";\r\nimport Sidebar from \"./components/SideBar/SideBar\";\r\nimport { selectIsLoggedIn } from \"./store/authentication/authenticationSlice\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction App() {\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        {isLoggedIn ? <Sidebar /> : null}\r\n        <Routes>\r\n          <Route exact path=\"/\" element={<Authentication />} />\r\n          <Route exact path=\"/playlists\" element={<Playlists />} />\r\n          <Route exact path=\"/home\" element={<Home />} />\r\n          <Route exact path=\"/search\" element={<Search />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport authenticationReducer from \"./authentication/authenticationSlice\";\r\nimport userReducer from \"./user/userSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    authorization: authenticationReducer,\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { store } from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}