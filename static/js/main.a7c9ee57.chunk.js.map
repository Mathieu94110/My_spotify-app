{"version":3,"sources":["conf/api.user.js","store/user/user.actions.js","conf/api.playlists.js","store/playlists/playlists.actions.js","store/authentication/authentication.actions.js","conf/api.browse.js","store/browse/browse.actions.js","store/user/user.selectors.js","store/playlists/playlists.selectors.js","store/authentication/authentication.selectors.js","store/browse/browse.selectors.js","Constants.js","pages/authentication/authentication.js","utils/hashUtils.js","oauthConfig.js","components/home/recentlyPlayed/RecentlyPlayed.js","components/home/browse/browseCategories/BrowseCategories.js","components/home/browse/browseContent/BrowseContent.js","components/utils/Loading.js","pages/home/Home.js","layout/card/Card.jsx","components/playlists/userPlaylists/UserPlaylists.js","components/playlists/createPlaylist/CreatePlaylist.jsx","components/playlists/createPlaylistModel/CreatePlaylistModel.js","pages/playlists/Playlists.jsx","components/search/searchResultItem/SearchResultItem.jsx","components/search/searchResult/SearchResult.jsx","components/modal/AddTrackModal.js","conf/api.search.js","pages/search/Search.jsx","assets/images/spotify-logo.png","components/SideBar/SideBar.jsx","App.js","serviceWorker.js","store/artists/artistsSlice.js","store/reducers.js","store/authentication/authentication.reducers.js","store/user/user.reducers.js","store/playlists/playlists.reducers.js","store/browse/browse.reducers.js","store/index.js","index.js"],"names":["apiSpotify","axios","baseURL","RecentActivityMap","item","name","track","artist","artists","album","albumArt","images","url","accessToken","interceptors","request","use","req","headers","get","then","response","data","localStorage","getItem","getAccessToken","items","recentActivity","map","REQUEST_FETCH_USER_INFOS","FETCH_USER_INFOS_SUCCESS","FETCH_USER_INFOS_ERROR","getUserProfile","dispatch","type","apiUserRequest","userInfos","fetchUserInfosSuccess","error","fetchUserInfosError","REQUEST_LAST_ACTIVITY","FETCH_LAST_ACTIVITY_SUCCESS","FETCH_LAST_ACTIVITY_ERROR","getUserId","PlaylistsMap","playlists","image","uri","description","id","userId","value","post","infos","REQUEST_GET_PLAYLISTS","FETCH_USER_PLAYLISTS_SUCCESS","FETCH_USER_PLAYLISTS_ERROR","REQUEST_POST_PLAYLIST","POST_USER_PLAYLIST_SUCCESS","POST_USER_PLAYLIST_ERROR","POST_TRACK_TO_PLAYLIST_SUCCESS","POST_TRACK_TO_PLAYLIST_ERROR","REQUEST_POST_TRACK_TO_PLAYLIST","getPlaylists","apiUserPlaylistsRequest","userPlaylists","fetchUserPlaylistsSuccess","fetchUserPlaylistsError","createPlaylist","playlistCreated","postUserPlaylistsError","addTrackToPlaylist","postTrackToPlaylistsError","SET_USER_TOKEN_INFOS","setTokenInfo","token","expireDate","setTokenDetails","albums","FETCH_NEW_RELEASES_SUCCESS","FETCH_NEW_RELEASES_ERROR","FETCH_CATEGORIES_SUCCESS","FETCH_CATEGORIES_ERROR","FETCH_FEATURED_SUCCESS","FETCH_FEATURED_ERROR","UPDATE_CATEGORY_TYPE","getNewReleases","apiUserBrowseRequest","newReleases","getNewReleasesSuccess","getNewReleasesError","getCategories","categories","getCategoriesSuccess","getCategoriesError","getFeatured","featured","getFeaturedSuccess","updateCategoryType","category","userSelector","state","user","lastActivityIsLoadingSelector","createSelector","isLoading","lastActivityListSelector","recentlyPlayed","lastActivityList","userInfosIsLoadingSelector","userInfosIsLoading","userInfosSelector","userIsLoggedIn","isUserLoggedIn","getUserPLaylistsSelector","getPlaylistsIsLoadingSelector","getPlaylistsListSelector","authSelector","authentication","selectAccessToken","tokenInfos","getBrowseCategoryListSelector","expires","browse","view","config","API_URL","REACT_APP_SPOTIFY_CLIENT_ID","hashParams","window","location","hash","substring","split","reduce","initial","parts","decodeURIComponent","access_token_params","access_token","expires_in_params","expires_in","history","pushState","document","title","pathname","search","connect","isLoggedIn","props","useDispatch","useEffect","tokenExpirationSec","Date","getTime","tokenExpirationTime","setItem","console","className","replace","to","onClick","open","join","RecentlyPlayed","songs","index","src","alt","style","width","viewType","BrowseContent","i","icons","minHeight","display","flexDirection","justifyContent","alignItems","fetchRecentlyPlayed","fetchRecentActivitySuccess","fetchRecentActivityError","Loading","display_name","charAt","toUpperCase","slice","Card","details","background","maxWidth","href","UserPlaylists","createPlayList","cancelPlaylistCreation","confirmPlaylistCreation","useState","setName","setDescription","isPlaylistCreated","setIsPlaylistCreated","reset","onSubmit","evt","preventDefault","onChange","event","target","disabled","CreatePlaylistModel","createdPlaylistInfo","setCreatedPlaylistInfo","toast","success","position","POSITION","TOP_RIGHT","catch","message","TOP_CENTER","SearchResultItem","modalCallback","albumUrl","SearchResult","searchResults","AddTrackModal","setIsOpen","checkedPlaylist","setCheckedPlaylist","playlist","checked","useSelector","setSearch","setSearchResults","isOpen","setTrack","isModalOpen","Authorization","params","q","apiUserSearchRequest","res","tracks","smallestAlbumImage","smallest","height","placeholder","e","finally","Sidebar","setopen","spotifyLogo","icon","faHome","faMagnifyingGlass","faFolder","exact","path","element","Boolean","hostname","match","artistsSlice","createSlice","initialState","topUserArtist","reducers","setTopUserArtist","action","payload","actions","createdPlaylist","fetchNewReleasesError","fetchCategoriesError","fetchFeaturedError","appReducer","combineReducers","middlewares","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a7c9ee57.chunk.js","sourcesContent":["import * as axios from 'axios';\r\n\r\nconst apiSpotify = axios.create({\r\n  baseURL: 'https://api.spotify.com/v1/',\r\n});\r\nconst getAccessToken = () => {\r\n  if (localStorage.getItem('accessToken')) {\r\n    return localStorage.getItem('accessToken');\r\n  }\r\n};\r\n\r\nexport const RecentActivityMap = (item) => ({\r\n  name: item.track.name,\r\n  artist: item.track.artists[0].name,\r\n  album: item.track.album.name,\r\n  albumArt: item.track.album.images[0].url,\r\n});\r\n\r\nexport default {\r\n  setUserProfileAsync: (accessToken) => {\r\n    apiSpotify.interceptors.request.use((req) => {\r\n      req.headers['Authorization'] = `Bearer ${accessToken}`;\r\n      return req;\r\n    });\r\n\r\n    return apiSpotify\r\n      .get('me')\r\n      .then((response) => response.data)\r\n      .then((data) => data);\r\n  },\r\n\r\n  getLastActivity: () => {\r\n    const accessToken = getAccessToken();\r\n    apiSpotify.interceptors.request.use((req) => {\r\n      req.headers['Authorization'] = `Bearer ${accessToken}`;\r\n      return req;\r\n    });\r\n\r\n    return apiSpotify\r\n      .get('me/player/recently-played')\r\n      .then((response) => response.data.items)\r\n      .then((recentActivity) => recentActivity.map(RecentActivityMap));\r\n  },\r\n};\r\n","import apiUserRequest from '../../conf/api.user';\r\n\r\n//User login status\r\nexport const REQUEST_FETCH_USER_INFOS = 'fetch user infos';\r\nexport const FETCH_USER_INFOS_SUCCESS = 'fetch user infos success';\r\nexport const FETCH_USER_INFOS_ERROR = 'fetch user infos error';\r\n\r\nexport const fetchUserInfos = () => ({\r\n  type: REQUEST_FETCH_USER_INFOS,\r\n});\r\n\r\nexport const fetchUserInfosSuccess = (userInfos) => ({\r\n  type: FETCH_USER_INFOS_SUCCESS,\r\n  userInfos,\r\n});\r\n\r\nexport const fetchUserInfosError = (error) => ({\r\n  type: FETCH_USER_INFOS_ERROR,\r\n  error,\r\n});\r\n\r\nexport const getUserProfile = (accessToken) => (dispatch) => {\r\n  dispatch(fetchUserInfos());\r\n  return apiUserRequest.setUserProfileAsync(accessToken).then(\r\n    (userInfos) => dispatch(fetchUserInfosSuccess(userInfos)),\r\n    (error) => dispatch(fetchUserInfosError(error))\r\n  );\r\n};\r\n\r\n// User recent activity\r\nexport const REQUEST_LAST_ACTIVITY = 'fetch last activity';\r\nexport const FETCH_LAST_ACTIVITY_SUCCESS = 'fetch last activity success';\r\nexport const FETCH_LAST_ACTIVITY_ERROR = 'fetch last activity error';\r\n\r\nexport const requestRecentActivity = () => ({\r\n  type: REQUEST_LAST_ACTIVITY,\r\n});\r\n\r\nexport const fetchRecentActivitySuccess = (recentlyPlayed) => ({\r\n  type: FETCH_LAST_ACTIVITY_SUCCESS,\r\n  recentlyPlayed,\r\n});\r\n\r\nexport const fetchRecentActivityError = (error) => ({\r\n  type: FETCH_LAST_ACTIVITY_ERROR,\r\n  error,\r\n});\r\n\r\nexport const fetchRecentlyPlayed = () => (dispatch) => {\r\n  dispatch(requestRecentActivity());\r\n  return apiUserRequest.getLastActivity().then(\r\n    (recentlyPlayed) => dispatch(fetchRecentActivitySuccess(recentlyPlayed)),\r\n    (error) => dispatch(fetchRecentActivityError(error))\r\n  );\r\n};\r\n","import * as axios from 'axios';\r\nconst apiSpotify = axios.create({\r\n  baseURL: 'https://api.spotify.com/v1/',\r\n});\r\n\r\nconst getAccessToken = () => {\r\n  if (localStorage.getItem('accessToken')) {\r\n    return localStorage.getItem('accessToken');\r\n  }\r\n};\r\n\r\nconst getUserId = () => {\r\n  if (localStorage.getItem('userId')) {\r\n    return localStorage.getItem('userId');\r\n  }\r\n};\r\n\r\nexport const PlaylistsMap = (playlists) => ({\r\n  image: playlists.images[0]?.url ? playlists.images[0].url : '',\r\n  uri: playlists.uri,\r\n  name: playlists.name,\r\n  description: playlists.description,\r\n  id: playlists.id,\r\n});\r\n\r\nexport default {\r\n  getUserPlaylists: () => {\r\n    const accessToken = getAccessToken();\r\n    const userId = getUserId();\r\n\r\n    apiSpotify.interceptors.request.use((req) => {\r\n      req.headers['Authorization'] = `Bearer ${accessToken}`;\r\n      return req;\r\n    });\r\n\r\n    return apiSpotify\r\n      .get(`users/${userId}/playlists`)\r\n      .then((response) => response.data.items)\r\n      .then((playlists) => playlists.map(PlaylistsMap));\r\n  },\r\n\r\n  createUserPlaylist: (value) => {\r\n    const { name, description } = value;\r\n    const accessToken = getAccessToken();\r\n    const userId = getUserId();\r\n\r\n    apiSpotify.interceptors.request.use((req) => {\r\n      req.headers['Authorization'] = `Bearer ${accessToken}`;\r\n      return req;\r\n    });\r\n\r\n    return apiSpotify\r\n      .post(`users/${userId}/playlists`, {\r\n        name: name,\r\n        description: description,\r\n      })\r\n      .then((response) => response.data)\r\n      .then((data) => {\r\n        const playlistInfo = {\r\n          uri: data.uri,\r\n          name: data.name,\r\n          description: data.description,\r\n          id: data.id,\r\n        };\r\n        return playlistInfo;\r\n      });\r\n  },\r\n\r\n  addTrackToPlaylist: (infos) => {\r\n    const { uri, id } = infos;\r\n    const accessToken = getAccessToken();\r\n    apiSpotify.interceptors.request.use((req) => {\r\n      req.headers['Authorization'] = `Bearer ${accessToken}`;\r\n      return req;\r\n    });\r\n\r\n    return apiSpotify\r\n      .post(`https://api.spotify.com/v1/playlists/${id}/tracks?uris=${uri}`)\r\n      .then((response) => response);\r\n  },\r\n};\r\n","import apiUserPlaylistsRequest from '../../conf/api.playlists';\r\n\r\nexport const REQUEST_GET_PLAYLISTS = 'request get user playlists';\r\nexport const FETCH_USER_PLAYLISTS_SUCCESS =\r\n  'request fetch user playlists success';\r\nexport const FETCH_USER_PLAYLISTS_ERROR = 'request fetch user playlists error';\r\nexport const REQUEST_POST_PLAYLIST = 'request post user playlist';\r\nexport const POST_USER_PLAYLIST_SUCCESS = 'request post user playlist success';\r\nexport const POST_USER_PLAYLIST_ERROR = 'request post user playlist error';\r\nexport const POST_TRACK_TO_PLAYLIST_SUCCESS =\r\n  'request post track to user playlist success';\r\nexport const POST_TRACK_TO_PLAYLIST_ERROR =\r\n  'request post track to user playlist error';\r\nexport const REQUEST_POST_TRACK_TO_PLAYLIST =\r\n  'request post track to user playlist';\r\n\r\nexport const requestGetUserPlaylists = () => ({\r\n  type: REQUEST_GET_PLAYLISTS,\r\n});\r\n\r\nexport const fetchUserPlaylistsSuccess = (userPlaylists) => ({\r\n  type: FETCH_USER_PLAYLISTS_SUCCESS,\r\n  userPlaylists,\r\n});\r\n\r\nexport const fetchUserPlaylistsError = (error) => ({\r\n  type: FETCH_USER_PLAYLISTS_ERROR,\r\n  error,\r\n});\r\n\r\nexport const requestPostUserPlaylist = () => ({\r\n  type: REQUEST_POST_PLAYLIST,\r\n});\r\n\r\nexport const postUserPlaylistsSuccess = (/* createdPlaylist */) => ({\r\n  type: POST_USER_PLAYLIST_SUCCESS,\r\n  /*   createdPlaylist, */\r\n});\r\n\r\nexport const postUserPlaylistsError = (error) => ({\r\n  type: POST_USER_PLAYLIST_ERROR,\r\n  error,\r\n});\r\n\r\nexport const requestPostTrackToUserPlaylist = () => ({\r\n  type: REQUEST_POST_TRACK_TO_PLAYLIST,\r\n});\r\n\r\nexport const postTrackToPlaylistsSuccess = () => ({\r\n  type: POST_TRACK_TO_PLAYLIST_SUCCESS,\r\n});\r\n\r\nexport const postTrackToPlaylistsError = (error) => ({\r\n  type: POST_TRACK_TO_PLAYLIST_ERROR,\r\n  error,\r\n});\r\n\r\nexport const getPlaylists = () => (dispatch) => {\r\n  dispatch(requestGetUserPlaylists());\r\n  return apiUserPlaylistsRequest.getUserPlaylists().then(\r\n    (userPlaylists) => dispatch(fetchUserPlaylistsSuccess(userPlaylists)),\r\n    (error) => dispatch(fetchUserPlaylistsError(error))\r\n  );\r\n};\r\nexport const createPlaylist = (value) => (dispatch) => {\r\n  dispatch(requestPostUserPlaylist());\r\n  return apiUserPlaylistsRequest.createUserPlaylist(value).then(\r\n    (playlistCreated) => dispatch(postUserPlaylistsSuccess(playlistCreated)),\r\n    (error) => dispatch(postUserPlaylistsError(error))\r\n  );\r\n};\r\nexport const addTrackToPlaylist = (infos) => (dispatch) => {\r\n  dispatch(requestPostTrackToUserPlaylist());\r\n  return apiUserPlaylistsRequest.addTrackToPlaylist(infos).then(\r\n    () => dispatch(postTrackToPlaylistsSuccess()),\r\n    (error) => dispatch(postTrackToPlaylistsError(error))\r\n  );\r\n};\r\n","export const SET_USER_TOKEN_INFOS = 'set tokens infos';\r\n\r\nexport const setTokenDetails = (token, expireDate) => ({\r\n  type: SET_USER_TOKEN_INFOS,\r\n  token,\r\n  expireDate,\r\n});\r\n\r\nexport const setTokenInfo = (token, expireDate) => (dispatch) => {\r\n  dispatch(setTokenDetails(token, expireDate));\r\n};\r\n","import * as axios from 'axios';\r\n\r\nconst apiSpotify = axios.create({\r\n  baseURL: 'https://api.spotify.com/v1/',\r\n});\r\nconst getAccessToken = () => {\r\n  if (localStorage.getItem('accessToken')) {\r\n    return localStorage.getItem('accessToken');\r\n  }\r\n};\r\nexport default {\r\n  fetchNewReleases: () => {\r\n    const accessToken = getAccessToken();\r\n    apiSpotify.interceptors.request.use((req) => {\r\n      req.headers['Authorization'] = `Bearer ${accessToken}`;\r\n      return req;\r\n    });\r\n\r\n    return apiSpotify\r\n      .get('browse/new-releases')\r\n      .then((response) => response.data.albums.items);\r\n  },\r\n\r\n  fetchCategories: () => {\r\n    const accessToken = getAccessToken();\r\n    apiSpotify.interceptors.request.use((req) => {\r\n      req.headers['Authorization'] = `Bearer ${accessToken}`;\r\n      return req;\r\n    });\r\n\r\n    return apiSpotify\r\n      .get('browse/categories')\r\n      .then((response) => response.data);\r\n  },\r\n\r\n  fetchFeatured: () => {\r\n    const accessToken = getAccessToken();\r\n    apiSpotify.interceptors.request.use((req) => {\r\n      req.headers['Authorization'] = `Bearer ${accessToken}`;\r\n      return req;\r\n    });\r\n    return apiSpotify\r\n      .get('browse/featured-playlists')\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n","import apiUserBrowseRequest from '../../conf/api.browse';\r\n\r\nexport const FETCH_NEW_RELEASES_SUCCESS = 'request fetch new releases success';\r\nexport const FETCH_NEW_RELEASES_ERROR = 'request fetch new releases error';\r\nexport const FETCH_CATEGORIES_SUCCESS = 'request fetch categories success';\r\nexport const FETCH_CATEGORIES_ERROR = 'request fetch categories error';\r\nexport const FETCH_FEATURED_SUCCESS = 'request fetch featured success';\r\nexport const FETCH_FEATURED_ERROR = 'request fetch featured error';\r\nexport const UPDATE_CATEGORY_TYPE = 'request update categories type';\r\n\r\n//New releases\r\nexport const getNewReleasesSuccess = (newReleases) => {\r\n  return {\r\n    type: FETCH_NEW_RELEASES_SUCCESS,\r\n    newReleases,\r\n  };\r\n};\r\n\r\nexport const getNewReleasesError = (error) => {\r\n  return {\r\n    type: FETCH_NEW_RELEASES_ERROR,\r\n    error,\r\n  };\r\n};\r\n\r\nexport const getNewReleases = () => (dispatch) => {\r\n  return apiUserBrowseRequest.fetchNewReleases().then(\r\n    (newReleases) => dispatch(getNewReleasesSuccess(newReleases)),\r\n    (error) => dispatch(getNewReleasesError(error))\r\n  );\r\n};\r\n\r\n//////////////\r\n//Get Browse categories\r\n\r\nexport const getCategoriesSuccess = (categories) => {\r\n  return {\r\n    type: FETCH_CATEGORIES_SUCCESS,\r\n    categories,\r\n  };\r\n};\r\n\r\nexport const getCategoriesError = (error) => {\r\n  return {\r\n    type: FETCH_CATEGORIES_ERROR,\r\n    error,\r\n  };\r\n};\r\n\r\nexport const getCategories = () => (dispatch) => {\r\n  return apiUserBrowseRequest.fetchCategories().then(\r\n    (categories) => dispatch(getCategoriesSuccess(categories.categories)),\r\n    (error) => dispatch(getCategoriesError(error))\r\n  );\r\n};\r\n///////////////\r\nexport const getFeaturedSuccess = (featured) => {\r\n  return {\r\n    type: FETCH_FEATURED_SUCCESS,\r\n    featured,\r\n  };\r\n};\r\n\r\nexport const getFeaturedError = () => {\r\n  return {\r\n    type: FETCH_FEATURED_ERROR,\r\n  };\r\n};\r\n\r\nexport const getFeatured = () => (dispatch) => {\r\n  return apiUserBrowseRequest.fetchFeatured().then(\r\n    (featured) => dispatch(getFeaturedSuccess(featured.playlists)),\r\n    (error) => dispatch(getFeaturedError(error))\r\n  );\r\n};\r\n// View type\r\n\r\nexport const updateCategoryType = (category) => {\r\n  return {\r\n    type: UPDATE_CATEGORY_TYPE,\r\n    category,\r\n  };\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const userSelector = (state) => state.user;\r\n\r\nexport const lastActivityIsLoadingSelector = createSelector(\r\n  [userSelector],\r\n  (user) => user.isLoading\r\n);\r\n\r\nexport const lastActivityListSelector = createSelector(\r\n  [userSelector],\r\n  (recentlyPlayed) => recentlyPlayed.lastActivityList\r\n);\r\n\r\nexport const userInfosIsLoadingSelector = createSelector(\r\n  [userSelector],\r\n  (user) => user.userInfosIsLoading\r\n);\r\n\r\nexport const userInfosSelector = createSelector(\r\n  [userSelector],\r\n  (user) => user.userInfos\r\n);\r\n\r\nexport const userIsLoggedIn = createSelector(\r\n  [userSelector],\r\n  (user) => user.isUserLoggedIn\r\n);\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const getUserPLaylistsSelector = (state) => state.playlists;\r\n\r\nexport const getPlaylistsIsLoadingSelector = createSelector(\r\n  [getUserPLaylistsSelector],\r\n  (playlists) => playlists.isLoading\r\n);\r\n\r\nexport const getPlaylistsListSelector = createSelector(\r\n  [getUserPLaylistsSelector],\r\n  (playlists) => playlists.data\r\n);\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const authSelector = (state) => state.authentication;\r\n\r\nexport const selectAccessToken = createSelector(\r\n  [authSelector],\r\n  (state) => state.tokenInfos.token\r\n);\r\n\r\nexport const selectTokenExpiryDate = createSelector(\r\n  [authSelector],\r\n  (state) => state.tokenInfos.expires\r\n);\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const getBrowseInfos = (state) => state.browse;\r\n\r\nexport const getBrowseCategoryListSelector = createSelector(\r\n  [getBrowseInfos],\r\n  (category) => category.view\r\n);\r\n","const prod = {\r\n  url: {\r\n    API_URL: 'https://mathieu94110.github.io/My_spotify-app/',\r\n    REACT_APP_SPOTIFY_CLIENT_ID: '230be2f46909426b8b80cac36446b52a',\r\n  },\r\n};\r\nconst dev = {\r\n  url: {\r\n    API_URL: 'http://localhost:3000/callback',\r\n    REACT_APP_SPOTIFY_CLIENT_ID: '230be2f46909426b8b80cac36446b52a',\r\n  },\r\n};\r\nexport const config = process.env.NODE_ENV === 'development' ? dev : prod;\r\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getUserProfile, setTokenInfo } from '../../store/actions';\r\nimport { userIsLoggedIn } from '../../store/selectors';\r\nimport { getAuthorizeHref } from '../../oauthConfig';\r\nimport { getHashParams, removeHashParamsFromUrl } from '../../utils/hashUtils';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport './Authentication.scss';\r\n\r\n// Here we register url values when getAuthorizeHref get the data from spotify api\r\nconst hashParams = getHashParams();\r\nconst access_token_params = hashParams.access_token;\r\nconst expires_in_params = hashParams.expires_in;\r\n// We clean hash\r\nremoveHashParamsFromUrl();\r\n\r\nconst Authentication = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!access_token_params || !expires_in_params) {\r\n      console.error('There was an error during the authentication');\r\n    } else {\r\n      const tokenExpirationSec = new Date().getTime() / 1000 + 3600,\r\n        tokenExpirationTime = new Date(tokenExpirationSec * 1000);\r\n      localStorage.setItem('accessToken', access_token_params);\r\n      localStorage.setItem('spotifyExpiresIn', tokenExpirationTime);\r\n      dispatch(setTokenInfo(access_token_params, tokenExpirationTime));\r\n      dispatch(getUserProfile(access_token_params));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      {!props.isLoggedIn ? (\r\n        <button\r\n          className=\"login__button\"\r\n          aria-label=\"Log in using OAuth 2.0\"\r\n          onClick={() => window.open(getAuthorizeHref(), '_self')}\r\n        >\r\n          Se connecter\r\n        </button>\r\n      ) : (\r\n        <Navigate replace to=\"/home\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    isLoggedIn: userIsLoggedIn(state),\r\n  }),\r\n  {}\r\n)(Authentication);\r\n","export const getHashParams = () => {\r\n  return window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce(function (initial, item) {\r\n      if (item) {\r\n        var parts = item.split(\"=\");\r\n        initial[parts[0]] = decodeURIComponent(parts[1]);\r\n      }\r\n      return initial;\r\n    }, {});\r\n};\r\n\r\nexport const removeHashParamsFromUrl = () => {\r\n  window.history.pushState(\r\n    \"\",\r\n    document.title,\r\n    window.location.pathname + window.location.search\r\n  );\r\n};\r\n","const authEndpoint = 'https://accounts.spotify.com/authorize';\r\nimport { config } from './Constants';\r\nexport const getAuthorizeHref = () => {\r\n  const scopes = [\r\n    'user-read-private',\r\n    'playlist-read-private',\r\n    'playlist-read-collaborative',\r\n    'playlist-modify-public',\r\n    'user-read-recently-played',\r\n    'playlist-modify-private',\r\n    'ugc-image-upload',\r\n    'user-follow-modify',\r\n    'user-follow-read',\r\n    'user-library-read',\r\n    'user-library-modify',\r\n    'user-top-read',\r\n    'user-read-email',\r\n    'user-read-playback-state',\r\n  ];\r\n\r\n  return process.env.NODE_ENV === 'development'\r\n    ? `${authEndpoint}?client_id=${\r\n        config.url.REACT_APP_SPOTIFY_CLIENT_ID\r\n      }&scope=${scopes.join('%20')}&response_type=token&redirect_uri=${\r\n        config.url.API_URL\r\n      }`\r\n    : `${authEndpoint}?client_id=${\r\n        config.url.REACT_APP_SPOTIFY_CLIENT_ID\r\n      }&scope=${scopes.join('%20')}&response_type=token`;\r\n};\r\n","import './RecentlyPlayed.scss';\r\n\r\nconst RecentlyPlayed = (props) => {\r\n  return (\r\n    <div className=\"recently-played\">\r\n      <h2 className=\"recently-played__title\">Écouté dernièrement</h2>\r\n      <div className=\"recently-played__content\">\r\n        {props.songs &&\r\n          props.songs.map((track, index) => (\r\n            <div className=\"recently-played__items\" key={index}>\r\n              <p>\r\n                <img\r\n                  src={track.albumArt}\r\n                  alt=\"{track.album}\"\r\n                  style={{ width: '60px' }}\r\n                />\r\n              </p>\r\n              <p className=\"recently-played__track-name\">{track.name}</p>\r\n\r\n              <p className=\"recently-played__track-artist\">{track.artist}</p>\r\n              <p className=\"recently-played__track-album\">{track.album}</p>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecentlyPlayed;\r\n","import React from 'react';\r\nimport {\r\n  getCategories,\r\n  getNewReleases,\r\n  getFeatured,\r\n  updateCategoryType,\r\n} from '../../../../store/actions';\r\nimport { connect } from 'react-redux';\r\nimport './BrowseCategories.scss';\r\n\r\nconst BrowseCategories = ({\r\n  getCategories,\r\n  getNewReleases,\r\n  getFeatured,\r\n  updateCategoryType,\r\n  viewType,\r\n}) => {\r\n  return (\r\n    <div className=\"section-title\">\r\n      <div>\r\n        <h3 className=\"header-title\">Catégories: </h3>\r\n        <div className=\"browse-headers\">\r\n          <p\r\n            className={viewType === 'New Releases' ? 'active' : ''}\r\n            onClick={() => {\r\n              getNewReleases();\r\n              updateCategoryType('New Releases');\r\n            }}\r\n          >\r\n            New Releases\r\n          </p>\r\n          <p\r\n            className={viewType === 'Genres' ? 'active' : ''}\r\n            onClick={() => {\r\n              getCategories();\r\n              updateCategoryType('Genres');\r\n            }}\r\n          >\r\n            Genres\r\n          </p>\r\n          <p\r\n            className={viewType === 'Featured' ? 'active' : ''}\r\n            onClick={() => {\r\n              getFeatured();\r\n              updateCategoryType('Featured');\r\n            }}\r\n          >\r\n            Featured\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    viewType: state.browse.viewType,\r\n  }),\r\n  {\r\n    getCategories,\r\n    getNewReleases,\r\n    updateCategoryType,\r\n    getFeatured,\r\n  }\r\n)(BrowseCategories);\r\n","import './BrowseContent.scss';\r\n\r\nconst BrowseContent = ({ newReleases }) => {\r\n  return (\r\n    <div className=\"browse-content\">\r\n      {newReleases &&\r\n        newReleases.map((item, i) => {\r\n          return (\r\n            <li className=\"browse-content-item\" key={i}>\r\n              <div className=\"browse-content-image\">\r\n                <img\r\n                  alt={item.name}\r\n                  src={item.icons ? item.icons[0].url : item.images[0].url}\r\n                  className=\"browse-content__album-img\"\r\n                />\r\n\r\n                <p className=\"browse-content-name\">{item.name}</p>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BrowseContent;\r\n","import React from 'react';\r\n\r\nexport default () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        minHeight: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n      }}\r\n    >\r\n      <img alt=\"loading gif\" src=\"https://i.redd.it/ounq1mw5kdxy.gif\" />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport './Home.scss';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  lastActivityIsLoadingSelector,\r\n  lastActivityListSelector,\r\n  userInfosIsLoadingSelector,\r\n  userInfosSelector,\r\n  getBrowseCategoryListSelector,\r\n} from '../../store/selectors';\r\nimport {\r\n  fetchRecentlyPlayed,\r\n  getNewReleases,\r\n  getCategories,\r\n  getFeatured,\r\n  updateCategoryType,\r\n} from '../../store/actions';\r\nimport Recentlyplayed from '../../components/home/recentlyPlayed/RecentlyPlayed';\r\nimport BrowseCategories from '../../components/home/browse/browseCategories/BrowseCategories';\r\nimport BrowseContent from '../../components/home/browse/browseContent/BrowseContent';\r\nimport Loading from '../../components/utils/Loading';\r\n\r\nconst Home = ({\r\n  isLoading,\r\n  recentlyPlayed,\r\n  userInfos,\r\n  userInfosIsLoading,\r\n  view,\r\n  fetchRecentlyPlayed,\r\n  getNewReleases,\r\n}) => {\r\n  useEffect(() => {\r\n    fetchRecentlyPlayed();\r\n    getNewReleases();\r\n  }, []);\r\n  return (\r\n    <>\r\n      {isLoading || userInfosIsLoading ? (\r\n        <Loading />\r\n      ) : (\r\n        <div className=\"home\">\r\n          <h1 className=\"home__title\">\r\n            {`Bienvenue ${\r\n              userInfos.display_name.charAt(0).toUpperCase() +\r\n              userInfos.display_name.slice(1)\r\n            } vous\r\n            êtes bien connecté sur votre plateforme Spotify `}\r\n          </h1>\r\n          <div className=\"home__rubriks-container\">\r\n            <div className=\"home__recent-container\">\r\n              <Recentlyplayed songs={recentlyPlayed} />\r\n            </div>\r\n            <div className=\"home__recent-container\">\r\n              <BrowseCategories />\r\n              <BrowseContent newReleases={view} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    isLoading: lastActivityIsLoadingSelector(state),\r\n    recentlyPlayed: lastActivityListSelector(state),\r\n    userInfos: userInfosSelector(state),\r\n    userInfosIsLoading: userInfosIsLoadingSelector(state),\r\n    view: getBrowseCategoryListSelector(state),\r\n  }),\r\n  {\r\n    fetchRecentlyPlayed,\r\n    getNewReleases,\r\n    getCategories,\r\n    getFeatured,\r\n    updateCategoryType,\r\n  }\r\n)(Home);\r\n","import React from \"react\";\r\nimport \"./Card.scss\";\r\n\r\nconst Card = (props) => {\r\n  const { image, uri, name, description, details } = props;\r\n  const style = {\r\n    background: \"url(\" + image + \") center center no-repeat\",\r\n    maxWidth: \"100%\",\r\n  };\r\n  return (\r\n    <div className=\"card\">\r\n      <header style={style} id={image} className=\"card__header\"></header>\r\n      <div className=\"card__body\">\r\n        <p className=\"card__date\">\r\n          Lien: <a href={uri}>{uri}</a>\r\n        </p>\r\n\r\n        <h2>{name}</h2>\r\n\r\n        <p className=\"card__content\">\r\n          {description ? description : \"Aucune description\"}\r\n        </p>\r\n        {details && (\r\n          <button className=\"button card__button-primary\">\r\n            <i className=\"fa fa-chevron-right\"></i> Voir le détail\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import './UserPlaylists.scss';\r\nimport Card from '../../../layout/card/Card';\r\n\r\nconst UserPlaylists = (props) => {\r\n  return (\r\n    <div className=\"user-playlists\">\r\n      <div className=\"user-playlists__title\">\r\n        {' '}\r\n        <h2>Vos playlists</h2>\r\n      </div>\r\n      <div className=\"user-playlists__content\">\r\n        {props.playlists &&\r\n          props.playlists.map((item, index) => (\r\n            <div key={index}>\r\n              <Card\r\n                image={item.images}\r\n                uri={item.uri}\r\n                name={item.name}\r\n                description={item.description}\r\n                details=\"true\"\r\n              />\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserPlaylists;\r\n","import { useState } from \"react\";\r\nimport \"./CreatePlaylist.scss\";\r\n\r\nexport default function createPlaylist({\r\n  createPlayList,\r\n  cancelPlaylistCreation,\r\n  confirmPlaylistCreation,\r\n}) {\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [isPlaylistCreated, setIsPlaylistCreated] = useState(false);\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    const createdPlaylist = {\r\n      name: name,\r\n      description: description,\r\n    };\r\n    createPlayList(createdPlaylist);\r\n    setIsPlaylistCreated(true);\r\n  };\r\n\r\n  const confirmCreation = () => {\r\n    confirmPlaylistCreation();\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setDescription(\"\");\r\n    cancelPlaylistCreation();\r\n    setIsPlaylistCreated(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"create-playlist\">\r\n      <div className=\"create-playlist__title\">\r\n        <h2>Créer une playlist</h2>\r\n      </div>\r\n      <div className=\"create-playlist__form-container\">\r\n        <form className=\"create-playlist__form\" onSubmit={handleSubmit}>\r\n          <label className=\"create-playlist__form-label\">\r\n            Nom:\r\n            <input\r\n              type=\"text\"\r\n              id=\"outlined-basic\"\r\n              className=\"create-playlist__form-inputs\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={(event) => setName(event.target.value)}\r\n              disabled={isPlaylistCreated}\r\n            />\r\n          </label>\r\n          <label className=\"create-playlist__form-label\">\r\n            Description:\r\n            <textarea\r\n              type=\"text\"\r\n              id=\"outlined-basic\"\r\n              className=\"create-playlist__form-inputs\"\r\n              name=\"description\"\r\n              value={description}\r\n              onChange={(event) => setDescription(event.target.value)}\r\n              disabled={isPlaylistCreated}\r\n            />\r\n          </label>\r\n          {isPlaylistCreated ? (\r\n            <>\r\n              <input\r\n                className=\"create-playlist__button create-playlist__button-validate\"\r\n                type=\"button\"\r\n                value=\"Valider la playlist\"\r\n                onClick={() => confirmCreation()}\r\n              />\r\n              <input\r\n                className=\"create-playlist__button create-playlist__button-cancel\"\r\n                type=\"button\"\r\n                value=\"Annuler\"\r\n                onClick={() => reset()}\r\n              />\r\n            </>\r\n          ) : (\r\n            <input\r\n              className=\"create-playlist__button create-playlist__button-create\"\r\n              type=\"submit\"\r\n              value=\"Créer la playlist\"\r\n              disabled={!name || !description}\r\n            />\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./CreatePlaylistModel.scss\";\r\nimport Card from \"../../../layout/card/Card\";\r\n\r\nconst CreatePlaylistModel = (props) => {\r\n  const { name, description, image, uri, details } = props;\r\n  return (\r\n    <div className=\"create-playlist-model\">\r\n      <div className=\"create-playlist-model__title\">\r\n        {\" \"}\r\n        <h2>Récapitulatif</h2>\r\n      </div>\r\n      <div className=\"create-playlist-model__content\">\r\n        <Card\r\n          image={image}\r\n          uri={uri}\r\n          name={name}\r\n          description={description}\r\n          details={details}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePlaylistModel;\r\n","import { useState, useEffect } from 'react';\r\nimport './Playlists.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport UserPlaylists from '../../components/playlists/userPlaylists/UserPlaylists';\r\nimport CreatePlaylist from '../../components/playlists/createPlaylist/CreatePlaylist';\r\nimport CreatePlaylistModel from '../../components/playlists/createPlaylistModel/CreatePlaylistModel';\r\nimport Loading from '../../components/utils/Loading';\r\nimport { getPlaylists, createPlaylist } from '../../store/actions';\r\nimport {\r\n  getPlaylistsIsLoadingSelector,\r\n  getPlaylistsListSelector,\r\n} from '../../store/selectors';\r\nimport { connect } from 'react-redux';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Playlists = (props) => {\r\n  const [createdPlaylistInfo, setCreatedPlaylistInfo] = useState({});\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    props.getPlaylists();\r\n  }, []);\r\n\r\n  const validatePlaylist = (value) => {\r\n    setCreatedPlaylistInfo(value);\r\n  };\r\n\r\n  const cancelPlaylistCreation = () => {\r\n    setCreatedPlaylistInfo({});\r\n  };\r\n\r\n  const confirmPlaylistCreation = () => {\r\n    dispatch(createPlaylist(createdPlaylistInfo))\r\n      .then(() => {\r\n        toast.success('La playlist a bien été créee !', {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        toast.error(`${error.message} !`, {\r\n          position: toast.POSITION.TOP_CENTER,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"playlists\">\r\n      <div className=\"playlists__content\">\r\n        {props.isLoading ? (\r\n          <Loading />\r\n        ) : (\r\n          <UserPlaylists playlists={props.userPlaylists} />\r\n        )}\r\n        <CreatePlaylist\r\n          createPlayList={validatePlaylist}\r\n          cancelPlaylistCreation={cancelPlaylistCreation}\r\n          confirmPlaylistCreation={confirmPlaylistCreation}\r\n        />\r\n        {createdPlaylistInfo.name && (\r\n          <CreatePlaylistModel\r\n            name={createdPlaylistInfo.name}\r\n            description={createdPlaylistInfo.description}\r\n          />\r\n        )}\r\n      </div>\r\n      {/* Tag below is necessary to display toast message*/}\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    isLoading: getPlaylistsIsLoadingSelector(state),\r\n    userPlaylists: getPlaylistsListSelector(state),\r\n  }),\r\n  {\r\n    getPlaylists,\r\n  }\r\n)(Playlists);\r\n","import React from \"react\";\r\nimport \"./SearchResultItem.scss\";\r\n\r\nconst SearchResultItem = ({ track, modalCallback }) => {\r\n  const handleParentCallback = () => {\r\n    modalCallback(track);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-result-item\">\r\n      <span className=\"search-result-item__image\">\r\n        <img src={track.albumUrl} />{\" \"}\r\n      </span>\r\n      <div>\r\n        <div>\r\n          {\" \"}\r\n          <span className=\"search-result-item__text\">{track.title}</span>\r\n        </div>\r\n        <div>\r\n          {\" \"}\r\n          <span className=\"search-result-item__artist\">{track.artist}</span>\r\n        </div>\r\n        <button\r\n          className=\"search-result-item__button\"\r\n          onClick={handleParentCallback}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResultItem;\r\n","import React from \"react\";\r\nimport \"./SearchResult.scss\";\r\nimport SearchResultItem from \"../searchResultItem/SearchResultItem\";\r\n\r\nconst SearchResult = ({ searchResults, modalCallback }) => {\r\n  return (\r\n    <div className=\"search-result\">\r\n      {searchResults.map((track, index) => (\r\n        <SearchResultItem\r\n          track={track}\r\n          key={index}\r\n          modalCallback={modalCallback}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n","import React, { useState } from 'react';\r\nimport './AddTrackModal.scss';\r\n\r\nconst AddTrackModal = ({ setIsOpen, playlists, track, addTrackToPlaylist }) => {\r\n  const [checkedPlaylist, setCheckedPlaylist] = useState(false);\r\n\r\n  const handleChange = (value) => {\r\n    setCheckedPlaylist(value);\r\n  };\r\n\r\n  const AddTrackCallback = () => {\r\n    addTrackToPlaylist(track, checkedPlaylist);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"add-track-modal\">\r\n        <div className=\"add-track-modal__modal\">\r\n          <div>\r\n            <h2 className=\"add-track-modal__title\">\r\n              Ajouter le titre à une playlist\r\n            </h2>\r\n            <div className=\"add-track-modal__subtitle\">\r\n              Sélectionner la playlist\r\n            </div>\r\n          </div>\r\n          <div className=\"add-track-modal__playlists\">\r\n            {playlists &&\r\n              playlists.map((playlist, index) => {\r\n                return (\r\n                  <div key={index} className=\"add-track-modal__playlists-items\">\r\n                    <span>{playlist.name}</span>{' '}\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      value={playlist.id}\r\n                      checked={checkedPlaylist === playlist}\r\n                      onChange={() => handleChange(playlist)}\r\n                    ></input>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n          <div>\r\n            <div className=\"add-track-modal__actions\">\r\n              <button\r\n                className=\"cancel-button\"\r\n                onClick={() => setIsOpen(false)}\r\n              >\r\n                Annuler\r\n              </button>\r\n              <button\r\n                className=\"validate-button\"\r\n                onClick={() => AddTrackCallback()}\r\n              >\r\n                Valider\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddTrackModal;\r\n","import * as axios from 'axios';\r\nconst apiSpotify = axios.create({\r\n  baseURL: 'https://api.spotify.com/v1/',\r\n});\r\n\r\nconst getAccessToken = () => {\r\n  if (localStorage.getItem('accessToken')) {\r\n    return localStorage.getItem('accessToken');\r\n  }\r\n};\r\n\r\nexport default {\r\n  searchTracks: (config) => {\r\n    const accessToken = getAccessToken();\r\n\r\n    apiSpotify.interceptors.request.use((req) => {\r\n      req.headers['Authorization'] = `Bearer ${accessToken}`;\r\n      return req;\r\n    });\r\n\r\n    return apiSpotify.get(`search`, config).then((response) => response);\r\n  },\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport SearchResult from '../../components/search/searchResult/SearchResult';\r\nimport AddTrackModal from '../../components/modal/AddTrackModal';\r\nimport { getPlaylists, addTrackToPlaylist } from '../../store/actions';\r\nimport {\r\n  selectAccessToken,\r\n  getPlaylistsListSelector,\r\n} from '../../store/selectors';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport apiUserSearchRequest from '../../conf/api.search';\r\nimport './Search.scss';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Search = (props) => {\r\n  const accessToken = useSelector(selectAccessToken);\r\n  const [search, setSearch] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [track, setTrack] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    props.getPlaylists();\r\n  }, []);\r\n\r\n  const isModalOpen = (value) => {\r\n    setTrack(value);\r\n    return setIsOpen(!isOpen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!search) return setSearchResults([]);\r\n\r\n    let config = {\r\n      headers: { Authorization: `Bearer ${accessToken}` },\r\n      params: {\r\n        q: search,\r\n        type: 'track',\r\n      },\r\n    };\r\n    apiUserSearchRequest.searchTracks(config).then((res) => {\r\n      setSearchResults(\r\n        res.data.tracks.items.map((track) => {\r\n          const smallestAlbumImage = track.album.images.reduce(\r\n            (smallest, image) => {\r\n              if (image.height < smallest.height) return image;\r\n              return smallest;\r\n            },\r\n            track.album.images[0]\r\n          );\r\n          return {\r\n            artist: track.artists[0].name,\r\n            title: track.name,\r\n            uri: track.uri,\r\n            albumUrl: smallestAlbumImage.url,\r\n          };\r\n        })\r\n      );\r\n    });\r\n  }, [search]);\r\n\r\n  const addTrack = (track, checkedPlaylist) => {\r\n    const { title, uri, ...trackRest } = track;\r\n    const { id, name, ...playlistRest } = checkedPlaylist;\r\n    dispatch(addTrackToPlaylist({ uri, id }))\r\n      .then(() => {\r\n        toast.success(`${title} a bien été ajouté à ${name} !`, {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        toast.error(`${error.message} !`, {\r\n          position: toast.POSITION.TOP_CENTER,\r\n        });\r\n      })\r\n      .finally(() => {\r\n        isModalOpen();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        className=\"search__input\"\r\n        type=\"search\"\r\n        placeholder=\"Rechercher un titre\"\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n      <SearchResult searchResults={searchResults} modalCallback={isModalOpen} />\r\n\r\n      {isOpen && (\r\n        <AddTrackModal\r\n          setIsOpen={isModalOpen}\r\n          playlists={props.userPlaylists}\r\n          // trackUri={trackUri}\r\n          track={track}\r\n          addTrackToPlaylist={addTrack}\r\n        />\r\n      )}\r\n      {/* Tag below is necessary to display toast message*/}\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    userPlaylists: getPlaylistsListSelector(state),\r\n  }),\r\n  {\r\n    getPlaylists,\r\n  }\r\n)(Search);\r\n","export default __webpack_public_path__ + \"static/media/spotify-logo.056948ef.png\";","import { useState } from \"react\";\r\nimport \"./SideBar.scss\";\r\nimport spotifyLogo from \"../../assets/images/spotify-logo.png\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faHome,\r\n  faMagnifyingGlass,\r\n  faFolder,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\n\r\nexport default function Sidebar() {\r\n  const [open, setopen] = useState(true);\r\n  const toggleOpen = () => {\r\n    setopen(!open);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={open ? \"sidebar\" : \"sidebar sidebar--closed\"}>\r\n        <div className=\"sidebar__top-links\">\r\n          <div className=\"sidebar__logo\">\r\n            <img\r\n              src={spotifyLogo}\r\n              alt=\"spotify\"\r\n              className={\r\n                open\r\n                  ? \"sidebar__logo-img\"\r\n                  : \"sidebar__logo-img sidebar__logo-img--closed\"\r\n              }\r\n            />\r\n          </div>\r\n          <button\r\n            className={\r\n              open\r\n                ? \"sidebar__menu-toggle\"\r\n                : \"sidebar__menu-toggle sidebar__menu-toggle--closed\"\r\n            }\r\n            onClick={toggleOpen}\r\n          >\r\n            {open ? (\r\n              <KeyboardDoubleArrowLeftIcon />\r\n            ) : (\r\n              <KeyboardDoubleArrowRightIcon />\r\n            )}\r\n          </button>\r\n          <ul className=\"sidebar__list-items\">\r\n            <li>\r\n              <NavLink to=\"/home\" className=\"sidebar__nav-link\">\r\n                <span>\r\n                  <FontAwesomeIcon icon={faHome} />\r\n                </span>\r\n                <span\r\n                  className={\r\n                    open\r\n                      ? \"sidebar__text-display\"\r\n                      : \"sidebar__text-display-none\"\r\n                  }\r\n                >\r\n                  Accueil\r\n                </span>\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/search\" className=\"sidebar__nav-link\">\r\n                <span>\r\n                  <FontAwesomeIcon icon={faMagnifyingGlass} />\r\n                </span>\r\n                <span\r\n                  className={\r\n                    open\r\n                      ? \"sidebar__text-display\"\r\n                      : \"sidebar__text-display-none\"\r\n                  }\r\n                >\r\n                  Rechercher\r\n                </span>\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/playlists\" className=\"nav-link\">\r\n                <span>\r\n                  <FontAwesomeIcon icon={faFolder} />\r\n                </span>\r\n                <span\r\n                  className={\r\n                    open\r\n                      ? \"sidebar__text-display\"\r\n                      : \"sidebar__text-display-none\"\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  Vos playlists\r\n                </span>\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport Authentication from './pages/authentication/authentication';\r\nimport Home from './pages/home/Home';\r\nimport Playlists from './pages/playlists/Playlists';\r\nimport Search from './pages/search/Search';\r\nimport Sidebar from './components/SideBar/SideBar';\r\nimport { HashRouter, Routes, Route } from 'react-router-dom';\r\nimport { userIsLoggedIn } from './store/selectors';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction App(props) {\r\n  return (\r\n    <HashRouter>\r\n      <div className=\"App\">\r\n        {props.isLoggedIn ? <Sidebar /> : null}\r\n        <Routes>\r\n          <Route exact path=\"/\" element={<Authentication />} />\r\n          <Route exact path=\"/playlists\" element={<Playlists />} />\r\n          <Route exact path=\"/home\" element={<Home />} />\r\n          <Route exact path=\"/search\" element={<Search />} />\r\n        </Routes>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    isLoggedIn: userIsLoggedIn(state),\r\n  }),\r\n  {}\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst getAccessToken = () => {\r\n  if (localStorage.getItem('accessToken')) {\r\n    return localStorage.getItem('accessToken');\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  topUserArtist: [],\r\n};\r\nexport const artistsSlice = createSlice({\r\n  name: 'artists',\r\n  initialState,\r\n  reducers: {\r\n    setTopUserArtist: (state, action) => {\r\n      state.topUserArtist = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setTopUserArtist } = artistsSlice.actions;\r\n\r\nexport const selectTopUserArtist = (state) => state.artists.topUserArtist;\r\n\r\nexport default artistsSlice.reducer;\r\n","import authentication from './authentication/authentication.reducers';\r\nimport user from './user/user.reducers';\r\nimport playlists from './playlists/playlists.reducers';\r\nimport browse from './browse/browse.reducers';\r\nimport artists from './artists/artistsSlice';\r\n\r\nexport default {\r\n  authentication,\r\n  user,\r\n  playlists,\r\n  artists,\r\n  browse\r\n};\r\n","import * as actions from './authentication.actions';\r\n\r\nexport default (\r\n  state = {\r\n    tokenInfos: {},\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case actions.SET_USER_TOKEN_INFOS: {\r\n      return {\r\n        ...state,\r\n        tokenInfos: { token: action.token, expires: action.expireDate },\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as actions from './user.actions';\r\n\r\nexport default (\r\n  state = {\r\n    userInfos: {},\r\n    lastActivityList: [],\r\n    userInfosIsLoading: false,\r\n    isUserLoggedIn: false,\r\n    isLoading: false,\r\n    error: null,\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case actions.REQUEST_FETCH_USER_INFOS: {\r\n      return {\r\n        ...state,\r\n        userInfosIsLoading: true,\r\n      };\r\n    }\r\n    case actions.FETCH_USER_INFOS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        userInfosIsLoading: false,\r\n        error: null,\r\n        userInfos: { ...action.userInfos },\r\n        isUserLoggedIn: true,\r\n      };\r\n    }\r\n    case actions.FETCH_USER_INFOS_ERROR: {\r\n      return {\r\n        ...state,\r\n        userInfosIsLoading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n    case actions.REQUEST_LAST_ACTIVITY: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n    case actions.FETCH_LAST_ACTIVITY_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: null,\r\n        lastActivityList: [...action.recentlyPlayed],\r\n      };\r\n    }\r\n\r\n    case actions.FETCH_LAST_ACTIVITY_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as actions from './playlists.actions';\r\n\r\nexport default (\r\n  state = {\r\n    data: [],\r\n    isLoading: false,\r\n    error: null,\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case (actions.REQUEST_GET_PLAYLISTS,\r\n    actions.REQUEST_POST_TRACK_TO_PLAYLIST): {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n    case actions.FETCH_USER_PLAYLISTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: null,\r\n        data: [...action.userPlaylists],\r\n      };\r\n    }\r\n\r\n    case actions.FETCH_USER_PLAYLISTS_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n    case actions.REQUEST_POST_PLAYLIST: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n    case actions.POST_USER_PLAYLIST_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: null,\r\n        data: [...state.data, action.createdPlaylist],\r\n      };\r\n    }\r\n    case actions.POST_USER_PLAYLIST_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n    case actions.POST_TRACK_TO_PLAYLIST_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    }\r\n    case actions.POST_TRACK_TO_PLAYLIST_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as actions from './browse.actions';\r\n\r\nexport default (\r\n  state = {\r\n    view: [],\r\n    fetchNewReleasesError: false,\r\n    viewType: 'New Releases',\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case actions.FETCH_NEW_RELEASES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        view: action.newReleases,\r\n        fetchNewReleasesError: false,\r\n      };\r\n\r\n    case actions.FETCH_NEW_RELEASES_ERROR:\r\n      return {\r\n        ...state,\r\n        fetchNewReleasesError: true,\r\n      };\r\n\r\n    case actions.FETCH_CATEGORIES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        view: action.categories.items,\r\n        fetchCategoriesError: false,\r\n      };\r\n\r\n    case actions.FETCH_CATEGORIES_ERROR:\r\n      return {\r\n        ...state,\r\n        fetchCategoriesError: true,\r\n      };\r\n\r\n    case actions.FETCH_FEATURED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        view: action.featured.items,\r\n        fetchFeaturedError: false,\r\n      };\r\n\r\n    case actions.FETCH_FEATURED_ERROR:\r\n      return {\r\n        ...state,\r\n        fetchFeaturedError: true,\r\n      };\r\n    case actions.UPDATE_CATEGORY_TYPE:\r\n      return {\r\n        ...state,\r\n        viewType: action.category,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport reducers from './reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst appReducer = combineReducers(reducers);\r\n\r\nconst middlewares = [thunkMiddleware];\r\n\r\nexport const store = createStore(\r\n  appReducer,\r\n  composeWithDevTools(applyMiddleware(...middlewares))\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}