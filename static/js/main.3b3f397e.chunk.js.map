{"version":3,"sources":["components/images/spotify_homepage_img.jpg","components/authentication.jsx","components/search.jsx","components/createPlaylist.jsx","components/home.jsx","components/newPlaylist.jsx","components/deletePlaylistItem.jsx","components/playlists.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Authentication","access_token","this","props","location","hash","split","pop","console","log","length","localStorage","config","headers","Authorization","axios","get","then","res","identifiant","data","id","setTimeout","history","push","href","Component","Search","handleChange","e","setState","searchActivated","search","target","value","state","tracks","albums","artists","bind","params","q","type","items","TextField","label","onChange","style","marginRight","Button","variant","color","onClick","addSearch","display","width","height","overflow","padding","map","track","index","ListItem","textAlign","key","ListItemText","primary","name","album","ListItemAvatar","Avatar","alt","src","images","url","position","margin","createPlaylist","searchImage","description","limit","alert","JSON","stringify","create","userId","post","catch","flexDirection","justifyContent","Home","playlists","flexWrap","GridList","cellHeight","GridListTile","cols","ListSubheader","component","playlist","title","GridListTileBar","actionIcon","IconButton","aria-label","window","newPlaylist","research","searchArtist","addTrack","uris","uri","playListId","refreshAdd","isCreatingPlaylitst","alignItems","top","transform","marginLeft","Grid","container","spacing","item","xs","Typography","List","maxHeight","overflowY","htmlFor","createNewPlaylist","startIcon","deletePlaylistItem","deleteIcon","ContentType","delete","refreshSub","Playlists","supvar","queryString","parse","miam","musics","filter","_music","artist","music","App","className","listStyleType","to","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kD,2ICGtBC,E,kLAEE,IAAD,OAKdC,EAFOC,KAAKC,MAAMC,SAASC,KAEPC,MAAM,kBAAkBC,MAAMD,MAAM,KAAK,GAEjE,GADAE,QAAQC,IAAI,oBAAqBR,GAC7BA,EAAaS,OAAS,EAAG,CAE3BC,aAAaV,aAAeA,EAC5B,IAAMW,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYb,KAGtCc,IAAMC,IAAI,gCAAiCJ,GAAQK,MAAK,SAACC,GACvD,IAAIC,EAAcD,EAAIE,KAAKC,GAC3BV,aAAaU,GAAKF,EAClBX,QAAQC,IAAIU,MAIdG,YAAW,kBAAM,EAAKnB,MAAMoB,QAAQC,KAAK,WAAU,Q,+BAKrD,OACE,6BACE,iDACA,uBAAGC,KAAK,sMAAR,qB,GA/BoCC,a,8DCYvBC,E,kDACnB,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IAURyB,aAAe,SAACC,GACd,EAAKC,SAAS,CACTC,iBAAiB,EACpBC,OAAQH,EAAEI,OAAOC,SAZnB,EAAKC,MAAQ,CACXH,OAAQ,GACRD,iBAAiB,EACjBK,OAAQ,GACRC,OAAQ,GACRC,QAAQ,IAEV,EAAKV,aAAe,EAAKA,aAAaW,KAAlB,gBATH,E,wDAkBN,IAAD,OAEErC,KAAK4B,SAAS,CACZC,iBAAiB,IAInB,IAAI9B,EAAeU,aAAaV,aAC5BW,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYb,IACpCuC,OAAQ,CACNC,EAAGvC,KAAKiC,MAAMH,OACdU,KAAM,uBAGV3B,IACGC,IAAI,oCAAqCJ,GACzCK,MAAK,SAACC,GACLV,QAAQC,IAAIS,EAAIE,MAChB,EAAKU,SAAS,CACZQ,QAASpB,EAAIE,KAAKkB,QAAQK,MAC1BN,OAAQnB,EAAIE,KAAKiB,OAAOM,MACxBP,OAAQlB,EAAIE,KAAKgB,OAAOO,a,+BAM1C,IAAIZ,EAAkB7B,KAAKiC,MAAMJ,gBAEjC,OAAKA,GAAgD,IAA7B7B,KAAKiC,MAAMH,OAAOtB,OAwB/BqB,GAAmB7B,KAAKiC,MAAMH,OAAOtB,OAAQ,EAEnD,6BACE,6BACT,6BACa,kBAACkC,EAAA,EAAD,CACEvB,GAAG,iBACHwB,MAAM,2BACNX,MAAOhC,KAAKiC,MAAMH,OAClBc,SAAU5C,KAAK0B,aACfmB,MAAO,CAAEC,YAAa,UAExB,kBAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,YACNC,QAASlD,KAAKmD,UAAUd,KAAKrC,OAH/B,eAYF,yBAAK6C,MAAO,CAAEO,QAAS,OAAQC,MAAO,OAASC,OAAO,MAAMC,SAAU,OAAOC,QAAQ,WACnF,yBAAKX,MAAO,CAACS,OAAO,UAClB,sCACCtD,KAAKiC,MAAMC,OAAOuB,KAAI,SAACC,EAAOC,GAC7B,OACE,6BACE,4BACF,kBAACC,EAAA,EAAD,CAAUC,UAAU,SAASC,IAAKH,GAChC,kBAACI,EAAA,EAAD,CAAcC,QAASN,EAAMO,cAQrC,yBAAKpB,MAAO,CAAES,OAAO,UACnB,qCACCtD,KAAKiC,MAAME,OAAOsB,KAAI,SAACS,EAAOP,GAC7B,OACE,6BACA,4BACA,kBAACC,EAAA,EAAD,CAAWE,IAAKH,GACd,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,IAAI,cAAcC,IAAKJ,EAAMK,OAAO,GAAGC,OAEjD,kBAACT,EAAA,EAAD,CAAcC,QAASE,EAAMD,sBAlDzC,EAtBH,yBAAKpB,MAAO,CAAE4B,SAAU,WAAWZ,UAAU,SAASa,OAAO,SAE3D,kBAAChC,EAAA,EAAD,CACEvB,GAAG,iBACHwB,MAAM,2BACNX,MAAOhC,KAAKiC,MAAMH,OAClBc,SAAU5C,KAAK0B,eAGjB,kBAACqB,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,YACNC,QAASlD,KAAKmD,UAAUd,KAAKrC,OAH/B,mB,GA5D0BwB,a,QCVfmD,E,kDACjB,WAAY1E,GAAQ,IAAD,8BACf,cAAMA,IAQV2E,YAAc,WACd,IAAI7E,EAAeU,aAAaV,aAChBW,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYb,IACpCuC,OAAQ,CACNC,EAAG,EAAKN,MAAM4C,YACZrC,KAAM,QACRsC,MAAM,IAGVjE,IACGC,IAAI,oCAAqCJ,GACzCK,MAAK,SAACC,GACLV,QAAQC,IAAIS,EAAIE,MAChB,EAAKU,SAAS,CAEVO,OAAQnB,EAAIE,KAAKiB,OAAOM,MAAM,GAAG8B,OAAO,GAAGC,MAG7CO,MAAMC,KAAKC,UAAU,EAAKhD,MAAME,aA5B/B,EAkCnB+C,OAAS,WACL,IAAInF,EAAeU,aAAaV,aAC5BoF,EAAS1E,aAAaU,GAC1B,GAAIpB,GAAgBoF,EAAQ,CACxB,IAAMzE,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYb,KAExCc,IAAMuE,KAAK,oCAAsCD,EAAS,aAAc,CAEpElB,KAAM,EAAKhC,MAAMgC,KAEjBY,YAAa,EAAK5C,MAAM4C,YACxBN,OAAQ,CAAC,CAAE,IAAO,oBAAqB,OAAU,IAAK,IAAM,GAAN,OAAUS,KAAKC,UAAU,EAAKhD,MAAME,SAAY,MAAS,OAChHzB,GAAQK,MAAK,SAAAC,GAEZV,QAAQC,IAAIS,MACbqE,OAAM,SAAA1D,GACLrB,QAAQC,IAAIoB,QAnDL,EA0DnBD,aAAe,SAACC,GAAO,IAAD,EAClB,EAAKC,UAAL,mBACKD,EAAEI,OAAOkC,KAAOtC,EAAEI,OAAOC,OAD9B,cAEKL,EAAEI,OAAO8C,YAAclD,EAAEI,OAAOC,OAFrC,KAzDA,EAAKC,MAAQ,CACTgC,KAAM,GACNY,YAAa,GACb1C,OAAQ,IALG,E,qDAkEf,OACI,yBAAKU,MAAO,CAACO,QAAQ,OAAOkC,cAAc,SAASC,eAAe,gBAAgBb,OAAO,eACrF,kBAAChC,EAAA,EAAD,CACIvB,GAAG,iBACHwB,MAAM,qBACNsB,KAAK,OACLjC,MAAOhC,KAAKiC,MAAMgC,KAClBrB,SAAU5C,KAAK0B,aACfmB,MAAO,KAEX,kBAACH,EAAA,EAAD,CACIvB,GAAG,iBACH8C,KAAK,cACLtB,MAAM,wBACNX,MAAOhC,KAAKiC,MAAM4C,YAClBjC,SAAU5C,KAAK0B,aACfmB,MAAO,KAEX,kBAACE,EAAA,EAAD,CACIC,QAAQ,YACRC,MAAM,YACNC,QAASlD,KAAK4E,aAHlB,mBAQA,kBAAC7B,EAAA,EAAD,CACIC,QAAQ,YACRC,MAAM,YACNC,QAASlD,KAAKkF,QAHlB,6B,GA7F4B1D,a,8DCevBgE,G,yDACnB,WAAYvF,GAAQ,IAAD,8BACjB,cAAMA,IACDgC,MAAQ,CACXwD,UAAW,IAHI,E,gEAME,IAAD,OAEd1F,EAAeU,aAAaV,aAC5BoF,EAAS1E,aAAaU,GAC1B,GAAIpB,GAAgBoF,EAAQ,CAC1B,IAAMzE,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYb,KAEtCc,IACGC,IACC,oCAAsCqE,EAAS,aAC/CzE,GAEDK,MAAK,SAACC,GACLV,QAAQC,IAAIS,EAAIE,KAAKuB,OACrB,EAAKb,SAAS,CACZ6D,UAAWzE,EAAIE,KAAKuB,gBAI1BzC,KAAKC,MAAMoB,QAAQC,KAAK,W,+BAM1B,OAAQ,6BACP,wBAAIuB,MAAO,CAAC6B,OAAO,WAAYzB,MAAM,SAArC,yEACC,yBAAKJ,MAAO,CAAEO,QAAS,OAAOmC,eAAe,eAAgBlC,MAAO,OAAQC,OAAO,UAC7E,yBAAKT,MAAO,CACpBO,QAAS,OACTsC,SAAU,OACVH,eAAgB,eAChBhC,SAAU,WAGR,kBAACoC,EAAA,EAAD,CAAUC,WAAY,IAAK/C,MAAO,CAACQ,MAAO,IAC5CC,OAAQ,MACJ,kBAACuC,EAAA,EAAD,CAAc/B,IAAI,YAAYgC,KAAM,EAAGjD,MAAO,CAAES,OAAQ,SACtD,kBAACyC,EAAA,EAAD,CAAeC,UAAU,OAAzB,wBAEDhG,KAAKiC,MAAMwD,UAAUhC,KAAI,SAACwC,EAAUtC,GAAX,OACvB,kBAACkC,EAAA,EAAD,CAAc/B,IAAKH,GACVsC,EAAS1B,OAAO,IACxB,yBAAKD,IAAK2B,EAAS1B,OAAO,GAAGC,IAAKH,IAAK4B,EAASC,QAChD,kBAACC,EAAA,EAAD,CACHD,MAAOD,EAAShC,KAEXmC,WACE,kBAACC,EAAA,EAAD,CAAYC,aAAA,cAA2BzD,MAAO,CAAKI,MAAO,8BACxD,kBAAC,IAAD,CAAUC,QAAS,kBAChBqD,OAAOrG,SACN,iBACA+F,EAAS9E,GACT,WACA8E,EAAShC,iBASvB,yBAAKpB,MAAO,CAAEO,QAAS,OAAQC,MAAO,MAAOC,OAAO,UAC9C,kBAAC,EAAD,OAEN,yBAAKT,MAAO,CAAEO,QAAS,OAAQC,MAAO,MAAOC,OAAO,UAC3C,kBAAC,EAAD,a,GA3EiB9B,c,4ECTbgF,E,kDACnB,WAAYvG,GAAQ,IAAD,8BACjB,cAAMA,IAURyB,aAAe,SAACC,GACd,EAAKC,SAAS,CACZ6E,SAAU9E,EAAEI,OAAOC,SAbJ,EAiBnB0E,aAAe,WACb,IAAI3G,EAAeU,aAAaV,aAC5BW,EAAS,CACXC,QAAS,CAAEC,cAAc,UAAD,OAAYb,IACpCuC,OAAQ,CAAEC,EAAG,EAAKN,MAAMwE,SAAUjE,KAAM,qBAAsBsC,MAAO,KAGvEjE,IAAMC,IAAI,oCAAqCJ,GAAQK,MAAK,SAACC,GAC3DV,QAAQC,IAAIS,EAAIE,MAChB,EAAKU,SAAS,CACZM,OAAQlB,EAAIE,KAAKgB,OAAOO,YA3BX,EAkCnBkE,SAAW,SAACjD,GAEVpD,QAAQC,IAAImD,GAEZ,IAAI3D,EAAeU,aAAaV,aAG1BW,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYb,IACpCuC,OAAQ,CAAEsE,KAAMlD,EAAMmD,MAGxBhG,IACGuE,KACC,wCACA,EAAKnF,MAAM6G,WACT,UACF,GACApG,GAEDK,MAAK,SAACC,GACLV,QAAQC,IAAIS,GAEZ,EAAKf,MAAM8G,gBAGfzG,QAAQC,IAAImD,IA1DZ,EAAKzB,MAAQ,CACX+E,qBAAqB,EAErBP,SAAU,GACVtE,OAAQ,GACRC,QAAS,GACTF,OAAQ,IARO,E,gEAgCjBlC,KAAK4B,SAAS,CAAEoF,qBAAqB,M,+BA+B7B,IAAD,OAGP,OAF4BhH,KAAKiC,MAAM+E,oBAInC,yBACEnE,MAAO,CACLoE,WAAY,SACZpD,UAAW,WAGb,0BACAhB,MAAO,CAAC4B,SAAS,aAEf,kBAAC/B,EAAA,EAAD,CACEvB,GAAG,iBACHwB,MAAM,6BACNH,KAAK,OACLK,MAAO,CAAEQ,MAAO,SAChBrB,MAAOhC,KAAKiC,MAAMwE,SAClB7D,SAAU5C,KAAK0B,aAAaW,KAAKrC,QAGnC,kBAAC+C,EAAA,EAAD,CACEP,KAAK,SACLU,QAASlD,KAAK0G,aAAarE,KAAKrC,MAChCgD,QAAQ,YACRC,MAAM,UACNJ,MAAO,CAAE4B,SAAU,WAAYyC,IAAK,MAAOC,UAAW,mBAAmBC,WAAW,SALtF,eAWF,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACf,kBAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACZzH,KAAKiC,MAAMC,OAAO1B,OAAS,EAC1B,kBAACkH,EAAA,EAAD,CAAY1E,QAAQ,KAAKgD,UAAU,MAAnC,UAGE,KACJ,kBAAC2B,EAAA,EAAD,CACE3B,UAAU,MACVM,aAAW,uBACXzD,MAAO,CAAE+E,UAAW,QAASC,UAAW,SAEvC7H,KAAKiC,MAAMC,OAAOuB,KAAI,SAACC,EAAOC,GAC7B,OACE,kBAACC,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAcC,QAASN,EAAMO,OAC7B,4BAAQf,QAAS,kBAAM,EAAKyD,SAASjD,KAArC,WAMV,kBAAC2D,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,MAQrB,6BAGN,2BAAOK,QAAQ,yBACP,kBAAC/E,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAU+C,UAAU,OAAOnD,MAAO,CAAE6B,OAAQ,YAC5ExB,QAASlD,KAAK+H,kBAAkB1F,KAAKrC,MAAagI,UAAW,kBAAC,IAAD,OAD/D,gB,GArIiCxG,a,iBCPpByG,E,kDACnB,WAAYhI,GAAQ,IAAD,8BACjB,cAAMA,IAIRiI,WAAa,WAEX,IAAInI,EAAeU,aAAaV,aAC1BW,EAAS,CACbC,QAAS,CACPC,cAAc,UAAD,OAAYb,GACzBoI,YAAY,oBAEdjH,KAAM,CAAEgB,OAAQ,CAAC,CAAE2E,IAAK,EAAK5G,MAAMyD,MAAMmD,QAE3ChG,IACGuH,OACC,yCACA,EAAKnI,MAAM6G,WACX,UACApG,GAEDK,MAAK,SAACC,GACHV,QAAQC,IAAIS,GACR,EAAKf,MAAMoI,gBAClBhD,OAAM,SAAC1D,GAAD,OAAOrB,QAAQC,IAAIoB,OAvB5B,EAAKM,MAAQ,GAFI,E,qDA4BjB,OACE,kBAACoE,EAAA,EAAD,CAAYC,aAAW,SAASpD,QAASlD,KAAKkI,YAC5C,kBAAC,IAAD,W,GA/BwC1G,aCG3B8G,E,kDACnB,WAAYrI,GAAQ,IAAD,8BACjB,cAAMA,IAaRoI,WAAa,WAEX,IACME,EADSC,IAAYC,MAAM,EAAKxI,MAAMC,SAAS4B,QAC/BX,GAClBuH,EAAO,EAAKzG,MAAM0G,OAAOC,QAAO,SAACC,GACnC,OAAOA,GAAUN,KAGtB,EAAK3G,SAAS,CAAE+G,OAAQD,KAtBJ,EAoCnB3B,WAAa,WACX,IAAIhH,EAAeU,aAAaV,aAC1BW,EAAS,CACbC,QAAS,CACPC,cAAc,UAAD,OAAYb,KAGvBuC,EAASkG,IAAYC,MAAM,EAAKxI,MAAMC,SAAS4B,QACrD,EAAKF,SAAS,CAAEkF,WAAYxE,EAAOnB,GAAI2H,OAAQxG,EAAOwG,SACtDxI,QAAQC,IAAI,SAAU+B,GACtBzB,IACGC,IACC,wCAA0CwB,EAAOnB,GAAK,UACtDT,GAEDK,MAAK,SAACC,GACLV,QAAQC,IAAIS,EAAIE,KAAKuB,OACrBnC,QAAQC,IAAIS,EAAIE,KAAKuB,MAAM,GAAGiB,MAAMtB,QAAQ,GAAG6B,MAC/C,EAAKrC,SAAS,CAAE+G,OAAQ3H,EAAIE,KAAKuB,YApDrC,EAAKR,MAAQ,CACX0G,OAAQ,GACRG,OAAQ,GACRhC,WAAY,MALG,E,gEAUjB9G,KAAK+G,aACL/G,KAAKqI,e,+BAiDG,IAAD,OACP,OACE,6BACE,wBAAIxF,MAAO,CAACI,MAAM,SAAUjD,KAAKiC,MAAM6G,QACvC,6BACE,kBAAC,EAAD,CACEhC,WAAY9G,KAAKiC,MAAM6E,WACvBC,WAAY/G,KAAK+G,aAGnB,yBAAKlE,MAAO,CAACS,OAAO,QAAQoB,OAAO,OAAOb,UAAU,OAASR,MAAM,QAASE,SAAS,SAClFvD,KAAKiC,MAAM0G,OAAOlF,KAAI,SAACsF,EAAOpF,GAC7B,OACE,yBACEG,IAAKH,EACLd,MAAO,CACL6B,OAAQ,SAGV,6BACGqE,EAAMrF,MAAMO,KACb,kBAAC,EAAD,CACE6C,WAAY,EAAK7E,MAAM6E,WACvBpD,MAAOqF,EAAMrF,MACb2E,WAAY,EAAKA,yB,GArFA7G,aCqBxBwH,MArBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,6BACE,wBAAIpG,MAAO,CAAE6B,OAAQ,MACnB,wBAAI7B,MAAO,CAAEqG,cAAe,SAC1B,kBAAC,IAAD,CAAMC,GAAG,SAAT,uBAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QAAQpD,UAAWlG,IAC/B,kBAAC,IAAD,CAAOsJ,KAAK,aAAapD,UAAWsC,IACpC,kBAAC,IAAD,CAAOc,KAAK,IAAIpD,UAAWR,QCTjB6D,QACW,cAA7B9C,OAAOrG,SAASoJ,UAEe,UAA7B/C,OAAOrG,SAASoJ,UAEhB/C,OAAOrG,SAASoJ,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhJ,MAAK,SAAAiJ,GACJA,EAAaC,gBAEd5E,OAAM,SAAA6E,GACL5J,QAAQ4J,MAAMA,EAAMC,a","file":"static/js/main.3b3f397e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spotify_homepage_img.a7757dd1.jpg\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class Authentication extends Component {\r\n \r\n  componentDidMount() {\r\n\r\n    // on récupère la châine de caractère dans l'URL qui correspond au hash (#)\r\n    let hash = this.props.location.hash; // fonction native en react\r\n    // on veut accéder à access_token, on doit récupérer sa valeur entre 2 chaines: #access_token= et &\r\n    let access_token = hash.split(\"#access_token=\").pop().split(\"&\")[0];\r\n    console.log(\"access token here\", access_token);\r\n    if (access_token.length > 0) {\r\n      // si notre code a détecté la présence d'aun access_token dans l'url, alors on le stocke dans le localstorage pour l'utilsier partour durant nos reqûetes futures\r\n      localStorage.access_token = access_token;\r\n      const config = {\r\n        headers: { Authorization: `Bearer ${access_token}` },\r\n      };\r\n\r\n      axios.get(\"https://api.spotify.com/v1/me\", config).then((res) => {\r\n        let identifiant = res.data.id;\r\n        localStorage.id = identifiant;\r\n        console.log(identifiant);\r\n      });\r\n\r\n      // une fois qu'on a stocké l'access_token dans le localstorage, on va rediriger l'utilisateur vers la page d'accueil\r\n      setTimeout(() => this.props.history.push(\"/home\"), 1000); //cacher pour voir le # dans l'url  ;\r\n    } else {\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Authentifiez-vous</h1>\r\n        <a href=\"https://accounts.spotify.com/authorize?client_id=de2017d063ae4b7d87f7d52b9d8c7d31&response_type=token&scope=playlist-modify-public playlist-modify-private&redirect_uri=http://localhost:3000/auth\">\r\n          Me connecter\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport List from '@material-ui/core/List';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default class Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      search: \"\",\r\n      searchActivated: false,\r\n      tracks: [],\r\n      albums: [],\r\n      artists:[]\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n         searchActivated: false,\r\n      search: e.target.value,\r\n    });\r\n \r\n  };\r\n  addSearch() {\r\n  \r\n                this.setState({\r\n                  searchActivated: true,\r\n               \r\n                });\r\n               \r\n                let access_token = localStorage.access_token;\r\n                let config = {\r\n                  headers: { Authorization: `Bearer ${access_token}` },\r\n                  params: {\r\n                    q: this.state.search,\r\n                    type: \"track,album,artist\",\r\n                  },\r\n                };\r\n                axios\r\n                  .get(\"https://api.spotify.com/v1/search\", config)\r\n                  .then((res) => {\r\n                    console.log(res.data);\r\n                    this.setState({\r\n                      artists: res.data.artists.items,\r\n                      albums: res.data.albums.items,\r\n                      tracks: res.data.tracks.items,\r\n                    });\r\n                  });\r\n              }\r\n\r\n  render() {\r\n    let searchActivated = this.state.searchActivated;\r\n \r\n    if (!searchActivated || this.state.search.length === 0) {\r\n      return (\r\n        <div style={{ position: \"relative\",textAlign:\"center\",margin:\"auto\" }}>\r\n       \r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Album, Titre ou Artiste \"\r\n            value={this.state.search}\r\n            onChange={this.handleChange}\r\n          //   style={{marginRight:\"20px\"}}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={this.addSearch.bind(this)}\r\n          // style={{ position: \"absolute\", top: \"50%\", transform:\"translateY(-50%)\"}}\r\n          >\r\n            Rechercher\r\n          </Button>\r\n          \r\n\r\n   \r\n        </div>\r\n      );\r\n    } else if (searchActivated && this.state.search.length >0 ) {\r\n       return (\r\n         <div>\r\n           <div >\r\n  <div>\r\n               <TextField\r\n                 id=\"outlined-basic\"\r\n                 label=\"Album, Titre ou Artiste \"\r\n                 value={this.state.search}\r\n                 onChange={this.handleChange}\r\n                 style={{ marginRight: \"20px\" }}\r\n               />\r\n               <Button\r\n                 variant=\"contained\"\r\n                 color=\"secondary\"\r\n                 onClick={this.addSearch.bind(this)}\r\n                 \r\n               >\r\n                 Rechercher\r\n             </Button>\r\n      </div>\r\n\r\n             \r\n\r\n             <div style={{ display: \"flex\", width: \"100%\" , height:\"80%\",overflow: \"auto\",padding:\"25px 0\" }}>\r\n               <div style={{height:\"480px\" }}>\r\n                 <h2>Titres</h2>\r\n                 {this.state.tracks.map((track, index) => {\r\n                   return (\r\n                     <div>\r\n                       <ul>\r\n                     <ListItem textAlign=\"center\" key={index}>\r\n                       <ListItemText primary={track.name}></ListItemText>\r\n                         </ListItem>\r\n                       </ul>\r\n                         </div>\r\n                         \r\n                   );\r\n                 })}\r\n               </div>\r\n               <div style={{ height:\"480px\" }}>\r\n                 <h2>Album</h2>\r\n                 {this.state.albums.map((album, index) => {\r\n                   return (\r\n                     <div>\r\n                     <ul>\r\n                     <ListItem  key={index}>\r\n                       <ListItemAvatar>\r\n                         <Avatar alt=\"album image\" src={album.images[2].url} />\r\n                       </ListItemAvatar>\r\n                       <ListItemText primary={album.name} />\r\n                     </ListItem>\r\n                     </ul>\r\n                     </div>\r\n                   )\r\n  \r\n                     \r\n                     \r\n                     \r\n                     \r\n                     \r\n                   \r\n                 })}\r\n               </div>\r\n\r\n             \r\n             </div>\r\n           </div>\r\n         </div>\r\n       );\r\n    }\r\n   \r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nexport default class createPlaylist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            description: '',\r\n            albums: [],\r\n        }\r\n    }\r\n\r\n    searchImage = () => {\r\n    let access_token = localStorage.access_token;\r\n                let config = {\r\n                  headers: { Authorization: `Bearer ${access_token}` },\r\n                  params: {\r\n                    q: this.state.description,\r\n                      type: \"album\",\r\n                    limit:3\r\n                  },\r\n                };\r\n                axios\r\n                  .get(\"https://api.spotify.com/v1/search\", config)\r\n                  .then((res) => {\r\n                    console.log(res.data);\r\n                    this.setState({\r\n             \r\n                        albums: res.data.albums.items[0].images[0].url,\r\n\r\n                    });\r\n                      alert(JSON.stringify(this.state.albums))\r\n                  });\r\n}\r\n\r\n\r\n\r\n    create = () => {\r\n        let access_token = localStorage.access_token;\r\n        let userId = localStorage.id;\r\n        if (access_token && userId) {\r\n            const config = {\r\n                headers: { Authorization: `Bearer ${access_token}` },\r\n            };\r\n            axios.post('https://api.spotify.com/v1/users/' + userId + '/playlists', {\r\n                \r\n                name: this.state.name,\r\n                \r\n                description: this.state.description,\r\n                images: [{ \"KEY\": \"image_description\", \"height\": 640, \"url\":`${ JSON.stringify(this.state.albums)}` , \"width\": 640 }]\r\n            }, config).then(res => {\r\n              \r\n                console.log(res)\r\n            }).catch(e => {\r\n                console.log(e)\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n            [e.target.description]: e.target.value,\r\n        });\r\n\r\n    };\r\n    render() {\r\n        return (\r\n            <div style={{display:\"flex\",flexDirection:\"column\",justifyContent:\"space-between\",margin:'100px auto'}}>\r\n                <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"Nom de la playlist\"\r\n                    name=\"name\"\r\n                    value={this.state.name}\r\n                    onChange={this.handleChange}\r\n                    style={{ }}\r\n                />\r\n                <TextField\r\n                    id=\"outlined-basic\"\r\n                    name=\"description\"\r\n                    label=\"Image(Nom d'un album)\"\r\n                    value={this.state.description}\r\n                    onChange={this.handleChange}\r\n                    style={{ }}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={this.searchImage}\r\n\r\n                >\r\n                    Valider l'album\r\n          </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={this.create}\r\n\r\n                >\r\n                    Créer la playlist\r\n          </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/*\r\n\r\nimage/\r\n<div style={{ height:\"480px\" }}>\r\n                 <h2>Album</h2>\r\n                 {this.state.albums.map((album, index) => {\r\n                   return (\r\n                     <div>\r\n                     <ul>\r\n                     <ListItem  key={index}>\r\n                       <ListItemAvatar>\r\n                         <Avatar alt=\"album image\" src={album.images[2].url} />\r\n                       </ListItemAvatar>\r\n                       <ListItemText primary={album.name} />\r\n                     </ListItem>\r\n                     </ul>\r\n                     </div>\r\n                   )\r\n\r\n                 })}\r\n               </div>\r\n\r\nstate et api call /\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst app = {};\r\n\r\napp.getArists = (artist) => $.ajax({\r\n    url: 'https://api.spotify.com/v1/search',\r\n    method: 'GET',\r\n    dataType: 'json',\r\n    data: {\r\n        type: 'artist',\r\n        q: artist\r\n    }\r\n});\r\n\r\napp.getAristsAlbums = (id) => $.ajax({\r\n    url: `https://api.spotify.com/v1/artists/${id}/albums`,\r\n    method: 'GET',\r\n    dataType: 'json',\r\n    data: {\r\n        album_type: 'album',\r\n    }\r\n});\r\n\r\napp.getAlbumTracks = (id) => $.ajax({\r\n    url: `https://api.spotify.com/v1/albums/${id}/tracks`,\r\n    method: 'GET',\r\n    dataType: 'json'\r\n});\r\n\r\napp.getAlbums = function(artists) {\r\n    let albums = artists.map(artist => app.getAristsAlbums(artist.id));\r\n    $.when(...albums)\r\n        .then((...albums) => {\r\n            let albumIds = albums\r\n                .map(a => a[0].items)\r\n                .reduce((prev,curr) => [...prev,...curr] ,[])\r\n                .map(album => app.getAlbumTracks(album.id));\r\n\r\n            app.getTracks(albumIds);\r\n        });\r\n};\r\n\r\napp.getTracks = function(tracks) {\r\n    $.when(...tracks)\r\n        .then((...tracks) => {\r\n            tracks = tracks\r\n                .map(getDataObject)\r\n                .reduce((prev,curr) => [...prev,...curr],[]);   \r\n            const randomPlayList = getRandomTracks(50,tracks);\r\n            app.createPlayList(randomPlayList);\r\n        })\r\n};\r\n\r\napp.createPlayList = function(songs) {\r\n    const baseUrl = 'https://embed.spotify.com/?theme=white&uri=spotify:trackset:My Playlist:';\r\n    songs = songs.map(song => song.id).join(',');\r\n    $('.loader').removeClass('show');\r\n    $('.playlist').append(`<iframe src=\"${baseUrl + songs}\" height=\"400\"></iframe>`);\r\n}\r\n\r\napp.init = function() {\r\n    $('form').on('submit', function(e) {\r\n        e.preventDefault();\r\n        let artists = $('input[type=search]').val();\r\n        $('.loader').addClass('show');\r\n        artists = artists\r\n            .split(',')\r\n            .map(app.getArists);\r\n        \r\n        $.when(...artists)\r\n            .then((...artists) => {\r\n                artists = artists.map(a => a[0].artists.items[0]);\r\n                console.log(artists);\r\n                app.getAlbums(artists);\r\n            });\r\n    });\r\n\r\n}\r\n\r\nconst getDataObject = arr => arr[0].items;\r\n\r\nfunction getRandomTracks(num, tracks) {\r\n    const randomResults = [];\r\n    for(let i = 0; i < num; i++) {\r\n        randomResults.push(tracks[ Math.floor(Math.random() * tracks.length) ])\r\n    }\r\n    return randomResults;\r\n}\r\n\r\n$(app.init);\r\n\r\n*/\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Search from \"./search\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport { CardMedia } from \"@material-ui/core\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport CreatePlaylist from \"./createPlaylist\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport background_img1 from './images/spotify_homepage_img.jpg'\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playlists: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    \r\n    let access_token = localStorage.access_token;\r\n    let userId = localStorage.id;\r\n    if (access_token && userId) {\r\n      const config = {\r\n        headers: { Authorization: `Bearer ${access_token}` },\r\n      };\r\n      axios\r\n        .get(\r\n          \"https://api.spotify.com/v1/users/\" + userId + \"/playlists\",\r\n          config\r\n        )\r\n        .then((res) => {\r\n          console.log(res.data.items);\r\n          this.setState({\r\n            playlists: res.data.items,\r\n          });\r\n        });\r\n    } else {\r\n      this.props.history.push(\"/auth\");\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (<div>\r\n     <h1 style={{margin:\"2vh auto\", color:\"gold\"}}>Bienvenue sur votre plateforme Spotify, vous êtes bien connecté</h1>\r\n      <div style={{ display: \"flex\",justifyContent:\"space-around\", width: \"100%\", height:\"600px\"}}>\r\n            <div style={{\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n   \r\n  }}>\r\n      <GridList cellHeight={180} style={{width: 500,\r\n    height: 450,}}>\r\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n          <ListSubheader component=\"div\">Playlists actuelles</ListSubheader>\r\n        </GridListTile>\r\n        {this.state.playlists.map((playlist, index) => (\r\n           <GridListTile key={index}>\r\n                   {playlist.images[0] && (\r\n            <img src={playlist.images[0].url} alt={playlist.title} />)}\r\n            <GridListTileBar\r\n         title={playlist.name}\r\n     \r\n              actionIcon={\r\n                <IconButton aria-label={`Voir titres`} style={{    color: 'rgba(255, 255, 255, 0.54)',}}>\r\n                  <InfoIcon onClick={() =>\r\n                    (window.location =\r\n                      \"/playlists?id=\" +\r\n                      playlist.id +\r\n                      \"&artist=\" +\r\n                      playlist.name)} />\r\n                </IconButton>\r\n              }\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n\r\n    </div>\r\n        <div style={{ display: \"flex\", width: \"20%\", height:\"600px\" }}>\r\n              <CreatePlaylist />\r\n          </div>\r\n        <div style={{ display: \"flex\", width: \"40%\", height:\"600px\"  }}>\r\n                 <Search />\r\n          </div>\r\n     </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport axios from \"axios\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport default class newPlaylist extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isCreatingPlaylitst: false,\r\n      \r\n      research: \"\",\r\n      albums: [],\r\n      artists: [],\r\n      tracks: [],\r\n    };\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      research: e.target.value,\r\n    });\r\n  };\r\n\r\n  searchArtist = () => {\r\n    let access_token = localStorage.access_token;\r\n    let config = {\r\n      headers: { Authorization: `Bearer ${access_token}` },\r\n      params: { q: this.state.research, type: \"artist,track,album\", limit: 50 },\r\n    };\r\n\r\n    axios.get(\"https://api.spotify.com/v1/search\", config).then((res) => {\r\n      console.log(res.data);\r\n      this.setState({\r\n        tracks: res.data.tracks.items,\r\n      });\r\n    });\r\n  };\r\n  createNewPlaylist() {\r\n    this.setState({ isCreatingPlaylitst: true });\r\n  }\r\n  addTrack = (track) => {\r\n \r\n    console.log(track);\r\n\r\n    let access_token = localStorage.access_token;\r\n\r\n\r\n    const config = {\r\n      headers: { Authorization: `Bearer ${access_token}` },\r\n      params: { uris: track.uri },\r\n    };\r\n\r\n    axios\r\n      .post(\r\n        \"https://api.spotify.com/v1/playlists/\" +\r\n        this.props.playListId +\r\n          \"/tracks\",\r\n        {},\r\n        config\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        // on met à jour la liste des tracks\r\n        this.props.refreshAdd()\r\n      });\r\n\r\n    console.log(track);\r\n  };\r\n\r\n  render() {\r\n    const isCreatingPlaylitst = this.state.isCreatingPlaylitst;\r\n    let button;\r\n    if (isCreatingPlaylitst) {\r\n      return (\r\n        <div\r\n          style={{\r\n            alignItems: \"center\",\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          <form\r\n          style={{position:\"relative\"}}\r\n          >\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Artiste , musique ou album\"\r\n              type=\"text\"\r\n              style={{ width: \"200px\" }}\r\n              value={this.state.research}\r\n              onChange={this.handleChange.bind(this)}\r\n            />\r\n\r\n            <Button\r\n              type=\"button\"\r\n              onClick={this.searchArtist.bind(this)}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ position: \"absolute\", top: \"50%\", transform: \"translateY(-50%)\",marginLeft:\"20px\" }}\r\n            >\r\n              Rechercher\r\n            </Button>\r\n          </form>\r\n\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={4}></Grid>\r\n            <Grid item xs={4}>\r\n              {this.state.tracks.length > 0 ? (\r\n                <Typography variant=\"h4\" component=\"h4\">\r\n                  Tracks\r\n                </Typography>\r\n              ) : null}\r\n              <List\r\n                component=\"nav\"\r\n                aria-label=\"main mailbox folders\"\r\n                style={{ maxHeight: \"200px\", overflowY: \"auto\" }}\r\n              >\r\n                {this.state.tracks.map((track, index) => {\r\n                  return (\r\n                    <ListItem>\r\n                      <ListItemText primary={track.name} />\r\n                      <button onClick={() => this.addTrack(track)} >+</button>\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n              </List>\r\n            </Grid>\r\n            <Grid item xs={4}></Grid>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    } else {\r\n    }\r\n    return (\r\n      <div>\r\n   \r\n\r\n<label htmlFor=\"contained-button-file\">\r\n        <Button variant=\"contained\" color=\"primary\" component=\"span\" style={{ margin: \"30px 0px\" }}\r\n          onClick={this.createNewPlaylist.bind(this)}       startIcon={<CloudUploadIcon />} >\r\n          Upload\r\n        </Button>\r\n      </label>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport axios from \"axios\";\r\nexport default class deletePlaylistItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  deleteIcon = () => {\r\n\r\n    let access_token = localStorage.access_token;\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${access_token}`,\r\n        ContentType:\"application/json\"//rajout\r\n      },\r\n      data: { tracks: [{ uri: this.props.track.uri }] },\r\n    };\r\n    axios\r\n      .delete(\r\n        \"https://api.spotifty.com/v1/playlists/\" +\r\n        this.props.playListId +\r\n        \"/tracks\",\r\n        config\r\n      )\r\n      .then((res) =>\r\n        { console.log(res);\r\n              this.props.refreshSub()} )\r\n      .catch((e) => console.log(e));\r\n  };\r\n  render() {\r\n    return (\r\n      <IconButton aria-label=\"delete\" onClick={this.deleteIcon}>\r\n        <DeleteIcon />\r\n      </IconButton>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport queryString from \"query-string\";\r\nimport axios from \"axios\";\r\nimport NewPlaylist from \"./newPlaylist\";\r\nimport DeletePlaylistItem from \"./deletePlaylistItem\";\r\n\r\n\r\nexport default class Playlists extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      musics: [],\r\n      artist: \"\",\r\n      playListId: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshAdd();\r\n    this.refreshSub();\r\n  }\r\n\r\n  refreshSub = () => {\r\n   \r\n    const params = queryString.parse(this.props.location.search);\r\n    const supvar = params.id;\r\n    let miam = this.state.musics.filter((_music) => {\r\n      return _music != supvar\r\n    })\r\n\r\n this.setState({ musics: miam });\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  refreshAdd = () => {\r\n    let access_token = localStorage.access_token;\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${access_token}`,\r\n      },\r\n    };\r\n    const params = queryString.parse(this.props.location.search);\r\n    this.setState({ playListId: params.id, artist: params.artist });\r\n    console.log(\"PARAMS\", params);\r\n    axios\r\n      .get(\r\n        \"https://api.spotify.com/v1/playlists/\" + params.id + \"/tracks\",\r\n        config\r\n      )\r\n      .then((res) => {\r\n        console.log(res.data.items);\r\n        console.log(res.data.items[0].track.artists[0].name);\r\n        this.setState({ musics: res.data.items });\r\n      });\r\n  };\r\n\r\n  // <div>{this.state.musics[0].track.artists[0].name}</div>\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 style={{color:\"gold\"}}>{this.state.artist}</h1>\r\n        <div>\r\n          <NewPlaylist\r\n            playListId={this.state.playListId}\r\n            refreshAdd={this.refreshAdd}\r\n          />\r\n\r\n          <div style={{height:\"500px\",margin:\"auto\",textAlign:\"left\" , width:\"500px\", overflow:\"auto\"}}>\r\n            {this.state.musics.map((music, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  style={{\r\n                    margin: \"auto\",\r\n                  }}\r\n                >\r\n                  <div>\r\n                    {music.track.name}\r\n                    <DeletePlaylistItem\r\n                      playListId={this.state.playListId}\r\n                      track={music.track}\r\n                      refreshSub={this.refreshSub}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Authentication from \"./components/authentication\";\nimport Home from \"./components/home\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Playlists from \"./components/playlists\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav>\n          <ul style={{ margin: \"0\" }}>\n            <li style={{ listStyleType: \"none\" }}>\n              <Link to=\"/auth\">Authentification</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/auth\" component={Authentication} />\n          <Route path=\"/playlists\" component={Playlists} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}